<?xml version="1.0" encoding="UTF-8" ?>
<class name="Steam" inherits="Object" category="Core" version="3.1.2">
	<brief_description>
		Steam API for the Godot game engine.
	</brief_description>
	<description>
		Steam API for the Godot game engine.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="acceptP2PSessionWithUser">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDRemote" type="int">
			</argument>
			<description>
				This allows the game to specify accept an incoming packet.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="activateActionSet">
			<return type="void">
			</return>
			<argument index="0" name="controllerHandle" type="int">
			</argument>
			<argument index="1" name="actionSetHandle" type="int">
			</argument>
			<description>
				Reconfigure the controller to use the specified action set.
			</description>
		</method>
		<method name="activateGameOverlay">
			<return type="void">
			</return>
			<argument index="0" name="dialog" type="String" default="">
			</argument>
			<description>
				Activates the overlay with optional dialog to open the following: "Friends", "Community", "Players", "Settings", "OfficialGameGroup", "Stats", "Achievements", "LobbyInvite".
			</description>
		</method>
		<method name="activateGameOverlayInviteDialog">
			<return type="void">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Activates game overlay to open the invite dialog. Invitations will be sent for the provided lobby.
			</description>
		</method>
		<method name="activateGameOverlayToStore">
			<return type="void">
			</return>
			<argument index="0" name="appID" type="int" default="0">
			</argument>
			<description>
				Activates the overlay with the application or game Steam store page.
			</description>
		</method>
		<method name="activateGameOverlayToUser">
			<return type="void">
			</return>
			<argument index="0" name="url" type="String" default="">
			</argument>
			<argument index="1" name="steamID" type="int" default="0">
			</argument>
			<description>
				Activates the overlay to the following: "steamid", "chat", "jointrade", "stats", "achievements", "friendadd", "friendremove", "friendrequestaccept", "friendrequestignore".
			</description>
		</method>
		<method name="activateGameOverlayToWebPage">
			<return type="void">
			</return>
			<argument index="0" name="url" type="String">
			</argument>
			<description>
				Activates the overlay with specified web address.
			</description>
		</method>
		<method name="addAppDependency">
			<return type="void">
			</return>
			<argument index="0" name="publishedFileID" type="int">
			</argument>
			<argument index="1" name="appID" type="int">
			</argument>
			<description>
				Adds a dependency between the given item and the appid. This list of dependencies can be retrieved by calling getAppDependencies. This is a soft-dependency that is displayed on the web. It is up to the application to determine whether the item can actually be used or not.
				Triggers [code]add_app_dependency_result[/code] callback.
			</description>
		</method>
		<method name="addDependency">
			<return type="void">
			</return>
			<argument index="0" name="publishedFileID" type="int">
			</argument>
			<argument index="1" name="childPublishedFileID" type="int">
			</argument>
			<description>
				Adds a workshop item as a dependency to the specified item. If the nParentPublishedFileID item is of type k_EWorkshopFileTypeCollection, than the nChildPublishedFileID is simply added to that collection. Otherwise, the dependency is a soft one that is displayed on the web and can be retrieved via the ISteamUGC API using a combination of the m_unNumChildren member variable of the SteamUGCDetails_t struct and GetQueryUGCChildren.
				Triggers [code]add_ugc_dependency_result[/code] callback.
			</description>
		</method>
		<method name="addExcludedTag">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="tagName" type="String">
			</argument>
			<description>
				Adds a excluded tag to a pending UGC Query. This will only return UGC without the specified tag.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="addFavoriteGame">
			<return type="int">
			</return>
			<argument index="0" name="ip" type="int">
			</argument>
			<argument index="1" name="port" type="int">
			</argument>
			<argument index="2" name="queryPort" type="int">
			</argument>
			<argument index="3" name="flags" type="int">
			</argument>
			<argument index="4" name="lastPlayed" type="int">
			</argument>
			<description>
				Adds the game server to the local list; updates the time played of the server if it already exists in the list.
				Not currently functional.
			</description>
		</method>
		<method name="addItemKeyValueTag">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="key" type="String">
			</argument>
			<argument index="2" name="value" type="String">
			</argument>
			<description>
				Adds a key-value tag pair to an item. Keys can map to multiple different values (1-to-many relationship).
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="addItemPreviewFile">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="previewFile" type="String">
			</argument>
			<argument index="2" name="type" type="int">
			</argument>
			<description>
				Adds an additional preview file for the item.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="addItemPreviewVideo">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="videoID" type="String">
			</argument>
			<description>
				Adds an additional video preview from YouTube for the item.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="addItemToFavorite">
			<return type="void">
			</return>
			<argument index="0" name="appID" type="int">
			</argument>
			<argument index="1" name="publishedFileID" type="int">
			</argument>
			<description>
				Adds a workshop item to the users favorites list.
				Triggers [code]user_favorite_items_list_changed[/code] callback.
			</description>
		</method>
		<method name="addRequestLobbyListDistanceFilter">
			<return type="void">
			</return>
			<argument index="0" name="distanceFilter" type="int">
			</argument>
			<description>
				Sets the distance for which we should search for lobbies (based on users IP address to location map on the Steam backed).
			</description>
		</method>
		<method name="addRequestLobbyListFilterSlotsAvailable">
			<return type="void">
			</return>
			<argument index="0" name="slotsAvailable" type="int">
			</argument>
			<description>
				Gets only lobbies with the specified number of slots available.
			</description>
		</method>
		<method name="addRequestLobbyListNearValueFilter">
			<return type="void">
			</return>
			<argument index="0" name="keyToMatch" type="String">
			</argument>
			<argument index="1" name="valueToBeCloseTo" type="int">
			</argument>
			<description>
				Gets results closest to the specified value. Multiple near filters can be added, with early filters taking precedence.
			</description>
		</method>
		<method name="addRequestLobbyListNumericalFilter">
			<return type="void">
			</return>
			<argument index="0" name="keyToMatch" type="String">
			</argument>
			<argument index="1" name="valueToMatch" type="int">
			</argument>
			<argument index="2" name="comparisonType" type="int">
			</argument>
			<description>
				Adds a numerical comparison filter to the next RequestLobbyList call.
			</description>
		</method>
		<method name="addRequestLobbyListResultCountFilter">
			<return type="void">
			</return>
			<argument index="0" name="maxResults" type="int">
			</argument>
			<description>
				Sets how many results to return, the lower the count the faster it is to download the lobby results and details to the client.
			</description>
		</method>
		<method name="addRequestLobbyListStringFilter">
			<return type="void">
			</return>
			<argument index="0" name="keyToMatch" type="String">
			</argument>
			<argument index="1" name="valueToMatch" type="String">
			</argument>
			<argument index="2" name="comparisonType" type="int">
			</argument>
			<description>
				Adds a [code]String[/code] comparison filter to the next RequestLobbyList call.
			</description>
		</method>
		<method name="addRequiredKeyValueTag">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="key" type="String">
			</argument>
			<argument index="2" name="value" type="String">
			</argument>
			<description>
				Adds a required key-value tag to a pending UGC Query. This will only return workshop items that have a key = pKey and a value = pValue.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="addRequiredTag">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="tagName" type="String">
			</argument>
			<description>
				Adds a required tag to a pending UGC Query. This will only return UGC with the specified tag.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="addScreenshotToLibrary">
			<return type="int">
			</return>
			<argument index="0" name="filename" type="String">
			</argument>
			<argument index="1" name="thumbnailName" type="String">
			</argument>
			<argument index="2" name="width" type="int">
			</argument>
			<argument index="3" name="height" type="int">
			</argument>
			<description>
				Adds a screenshot to the user's Steam screenshot library from disk.
				Should also trigger [code]screenshot_ready[/code] callback.
			</description>
		</method>
		<method name="advertiseGame">
			<return type="void">
			</return>
			<argument index="0" name="serverIP" type="String">
			</argument>
			<argument index="1" name="port" type="int">
			</argument>
			<description>
				(LEGACY FUNCTION)
				Set data to be replicated to friends so that they can join your game.
			</description>
		</method>
		<method name="allowP2PPacketRelay">
			<return type="bool">
			</return>
			<argument index="0" name="allow" type="bool">
			</argument>
			<description>
				Allow or disallow P2P connections to fall back to being relayed through the Steam servers if a direct connection or NAT-traversal cannot be established.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="attachLeaderboardUGC">
			<return type="void">
			</return>
			<description>
				Attaches a piece of user generated content the current user's entry on a leaderboard.
				Triggers [code]leaderboard_ugc_set[/code] callback.
			</description>
		</method>
		<method name="beginAuthSession">
			<return type="int">
			</return>
			<argument index="0" name="ticket" type="int">
			</argument>
			<argument index="1" name="steamID" type="int">
			</argument>
			<description>
				Authenticate the ticket from the entity's Steam ID to be sure it is valid and isn't reused.
			</description>
		</method>
		<method name="cancelAuthTicket">
			<return type="void">
			</return>
			<argument index="0" name="ticket" type="int">
			</argument>
			<description>
				Cancels an authentication ticket.
			</description>
		</method>
		<method name="clearAchievement">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Clears a given achievement.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="clearRichPresence">
			<return type="void">
			</return>
			<description>
				Clear the game information in Steam; used in 'View Game Info'.
			</description>
		</method>
		<method name="closeClanChatWindowInSteam">
			<return type="bool">
			</return>
			<argument index="0" name="chatID" type="int">
			</argument>
			<description>
				Closes the specified Steam group chat room in the Steam UI.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="closeP2PChannelWithUser">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDRemote" type="int">
			</argument>
			<argument index="1" name="channel" type="int">
			</argument>
			<description>
				Closes a P2P channel when you're done talking to a user on the specific channel.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="closeP2PSessionWithUser">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDRemote" type="int">
			</argument>
			<description>
				This should be called when you're done communicating with a user, as this will free up all of the resources allocated for the connection under-the-hood.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="createItem">
			<return type="void">
			</return>
			<argument index="0" name="appID" type="int">
			</argument>
			<argument index="1" name="fileType" type="int">
			</argument>
			<description>
				Creates a new workshop item with no content attached yet.
				Triggers [code]item_created[/code] callback.
			</description>
		</method>
		<method name="createLobby">
			<return type="void">
			</return>
			<argument index="0" name="lobbyType" type="int">
			</argument>
			<argument index="1" name="maxMembers" type="int" default="2">
			</argument>
			<description>
				Create a lobby on the Steam servers, if private the lobby will not be returned by any RequestLobbyList() call.
				Triggers [code]lobby_created[/code] callback.
			</description>
		</method>
		<method name="createQueryAllUGCRequest">
			<return type="int">
			</return>
			<argument index="0" name="queryType" type="int">
			</argument>
			<argument index="1" name="matchingType" type="int">
			</argument>
			<argument index="2" name="creatorID" type="int">
			</argument>
			<argument index="3" name="consumerID" type="int">
			</argument>
			<argument index="4" name="page" type="int">
			</argument>
			<description>
				Query for all matching UGC. You can use this to list all of the available UGC for your app.
				Returns a new handle upon success.
			</description>
		</method>
		<method name="createQueryUGCDetailsRequest">
			<return type="int">
			</return>
			<argument index="0" name="publishedFileIDs" type="Array">
			</argument>
			<description>
				Query for the details of specific workshop items.
				Returns a new handle upon success.
			</description>
		</method>
		<method name="deleteItem">
			<return type="void">
			</return>
			<argument index="0" name="publishedFileID" type="int">
			</argument>
			<description>
				Deletes the item without prompting the user.
				Triggers [code]item_deleted[/code] callback.
			</description>
		</method>
		<method name="deleteLobbyData">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="key" type="String">
			</argument>
			<description>
				Removes a metadata key from the lobby.
				BOOL: returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="downloadClanActivityCounts">
			<return type="void">
			</return>
			<argument index="0" name="clanID" type="int">
			</argument>
			<argument index="1" name="clansToRequest" type="int">
			</argument>
			<description>
				For clans a user is a member of, they will have reasonably up-to-date information, but for others you'll have to download the info to have the latest.
				Triggers [code]clan_activity_downloaded[/code] callback.
			</description>
		</method>
		<method name="downloadItem">
			<return type="bool">
			</return>
			<argument index="0" name="publishedFileID" type="int">
			</argument>
			<argument index="1" name="highPriority" type="bool">
			</argument>
			<description>
				Download new or update already installed item. If returns [code]true[/code], wait for DownloadItemResult_t. If item is already installed, then files on disk should not be used until callback received. If item is not subscribed to, it will be cached for some time. If bHighPriority is set, any other item download will be suspended and this item downloaded ASAP.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="downloadLeaderboardEntries">
			<return type="void">
			</return>
			<argument index="0" name="start" type="int">
			</argument>
			<argument index="1" name="end" type="int">
			</argument>
			<argument index="2" name="type" type="int" default="0">
			</argument>
			<description>
				Request all rows for friends of user.
				Triggers [code]leaderboard_scores_downloaded[/code]
			</description>
		</method>
		<method name="downloadLeaderboardEntriesForUsers">
			<return type="void">
			</return>
			<argument index="0" name="usersID" type="Array">
			</argument>
			<description>
				Request a maximum of 100 users with only one outstanding call at a time.
				Triggers [code]leaderboard_scores_downloaded[/code] callback.
			</description>
		</method>
		<method name="endAuthSession">
			<return type="void">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Ends an authentication session.
			</description>
		</method>
		<method name="enumerateFollowingList">
			<return type="void">
			</return>
			<argument index="0" name="startIndex" type="int">
			</argument>
			<description>
				Gets the list of users that the current user is following.
				Triggers [code]enumerate_following_list[/code]
			</description>
		</method>
		<method name="fileDelete">
			<return type="bool">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Delete user file from remote online storage.
				Returns [code]true[/code] if deleted or [code]false[/code] if not.
			</description>
		</method>
		<method name="fileExists">
			<return type="bool">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Check if a remote file exists.
				Return [code]true[/code] if it does or [code]false[/code] if it does not.
			</description>
		</method>
		<method name="fileForget">
			<return type="bool">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Deletes the file from remote storage, but leaves it on the local disk and remains accessible from the API.
				Returns [code]true[/code] if forgotten or [code]false[/code] if not.
			</description>
		</method>
		<method name="filePersisted">
			<return type="bool">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Checks if a specific file is persisted in the Steam Cloud. Depreciated: PS3 Only
				Returns [code]true[/code] if it has or [code]false[/code] if it has not.
			</description>
		</method>
		<method name="fileRead">
			<return type="Dictionary">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<argument index="1" name="dataToRead" type="int">
			</argument>
			<description>
				Read user file from remote online storage.
				Returns with a response and data.
			</description>
		</method>
		<method name="fileWrite">
			<return type="bool">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<argument index="1" name="data" type="PoolByteArray">
			</argument>
			<argument index="2" name="dataSize" type="int">
			</argument>
			<description>
				Write user file to remote online storage.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="findLeaderboard">
			<return type="void">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Find a given leaderboard, by name.
				Triggers [code]leaderboard_find_result[/code]
			</description>
		</method>
		<method name="findOrCreateLeaderboard">
			<return type="void">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="sortMethod" type="int">
			</argument>
			<argument index="2" name="displayType" type="int">
			</argument>
			<description>
				Gets a leaderboard by name, it will create it if it's not yet created.
				Triggers [code]leaderboard_find_result[/code] callback.
			</description>
		</method>
		<method name="getAchievement">
			<return type="Dictionary">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Return [code]true[/code]/false if user has given achievement and the bool status of it being achieved or not.
				Returns a [Dictionary] containing a bool success or not and achieved or not.
			</description>
		</method>
		<method name="getAchievementAchievedPercent">
			<return type="Dictionary">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Returns the percentage of users who have unlocked the specified achievement.
				Returns a [Dictionary] containing a bool of success or not and an int for the percentage.
			</description>
		</method>
		<method name="getAchievementAndUnlockTime">
			<return type="Dictionary">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Get the achievement status, and the time it was unlocked if unlocked (in seconds since January 1, 19).
				Returns a [Dictionary] containing a bool of success or not, a bool of whether it was achieved or not, and an int of the unlock time in Unix.
			</description>
		</method>
		<method name="getAchievementDisplayAttribute">
			<return type="String">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="key" type="String">
			</argument>
			<description>
				Get general attributes for an achievement.
			</description>
		</method>
		<method name="getAchievementIcon">
			<return type="void">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Gets the icon for an achievement.
				Triggers [code]user_achievement_icon_fetched[/code] callback.
			</description>
		</method>
		<method name="getAchievementName">
			<return type="String">
			</return>
			<argument index="0" name="achievement" type="int">
			</argument>
			<description>
				Gets the "API name" for an achievement index.
			</description>
		</method>
		<method name="getActionSetHandle">
			<return type="int">
			</return>
			<argument index="0" name="actionSetName" type="String">
			</argument>
			<description>
				Lookup the handle for an action set.
				Returns the handle ID.
			</description>
		</method>
		<method name="getAnalogActionData">
			<return type="Dictionary">
			</return>
			<argument index="0" name="controllerHandle" type="int">
			</argument>
			<argument index="1" name="analogActionHandle" type="int">
			</argument>
			<description>
				Gets the current state of the supplied analog game action.
				Returns mode, x, y, and active.
			</description>
		</method>
		<method name="getAnalogActionHandle">
			<return type="int">
			</return>
			<argument index="0" name="actionName" type="String">
			</argument>
			<description>
				Get the handle of the specified analog action.
				Returns the handle ID.
			</description>
		</method>
		<method name="getAnalogActionOrigins">
			<return type="Array">
			</return>
			<argument index="0" name="controllerHandle" type="int">
			</argument>
			<argument index="1" name="actionSetHandle" type="int">
			</argument>
			<argument index="2" name="analogActionHandle" type="int">
			</argument>
			<description>
				Get the origin(s) for an analog action within an action.
				Returns handle IDs.
			</description>
		</method>
		<method name="getAppBuildId">
			<return type="int">
			</return>
			<description>
				Gets the build ID for this application; will change based on backend updates.
			</description>
		</method>
		<method name="getAppDependencies">
			<return type="void">
			</return>
			<argument index="0" name="publishedFileID" type="int">
			</argument>
			<description>
				Returns any app dependencies that are associated with the given item.
				Triggers [code]get_app_dependencies_result[/code] callback.
			</description>
		</method>
		<method name="getAppID">
			<return type="int">
			</return>
			<description>
				Get the Steam ID of the running application or game.
			</description>
		</method>
		<method name="getAppInstallDir">
			<return type="String">
			</return>
			<argument index="0" name="appID" type="int">
			</argument>
			<description>
				Gets the install folder for a specific AppID.
			</description>
		</method>
		<method name="getAppOwner">
			<return type="int">
			</return>
			<description>
				Gets the Steam ID of the original owner of the current app. If it's different from the current user then it is borrowed.
			</description>
		</method>
		<method name="getAuthSessionTicket">
			<return type="int">
			</return>
			<description>
				Get an authentication ticket.
			</description>
		</method>
		<method name="getAvailableGameLanguages">
			<return type="String">
			</return>
			<description>
				Get a list of the languages the current app supports.
				Returns comma-separated list of two-letter country language codes.
			</description>
		</method>
		<method name="getAvailableP2PPacketSize">
			<return type="int">
			</return>
			<argument index="0" name="channel" type="int">
			</argument>
			<description>
				Calls IsP2PPacketAvailable() under the hood, returns the size of the available packet or zero if there is no such packet.
			</description>
		</method>
		<method name="getChatMemberByIndex">
			<return type="int">
			</return>
			<argument index="0" name="clanID" type="int">
			</argument>
			<argument index="1" name="user" type="int">
			</argument>
			<description>
				Gets the Steam ID at the given index in a Steam group chat.
			</description>
		</method>
		<method name="getClanChatMemberCount">
			<return type="int">
			</return>
			<argument index="0" name="clanID" type="int">
			</argument>
			<description>
				Get the number of users in a Steam group chat.
			</description>
		</method>
		<method name="getClanOfficerByIndex">
			<return type="int">
			</return>
			<argument index="0" name="clanID" type="int">
			</argument>
			<argument index="1" name="officer" type="int">
			</argument>
			<description>
				Returns the steamID of a clan officer, by index, of range [0, GetClanOfficerCount).
			</description>
		</method>
		<method name="getClanOfficerCount">
			<return type="int">
			</return>
			<argument index="0" name="clanID" type="int">
			</argument>
			<description>
				Returns the number of officers in a clan (including the owner).
			</description>
		</method>
		<method name="getClanOwner">
			<return type="int">
			</return>
			<argument index="0" name="clanID" type="int">
			</argument>
			<description>
				Get the steamID of the clan owner.
			</description>
		</method>
		<method name="getConnectedControllers">
			<return type="Array">
			</return>
			<description>
				Get current controllers handles.
				Returns handle IDs.
			</description>
		</method>
		<method name="getControllerForGamepadIndex">
			<return type="int">
			</return>
			<argument index="0" name="controllerHandle" type="int">
			</argument>
			<description>
				Get the associated controller handle for the specified emulated gamepad.
				Returns the handle ID.
			</description>
		</method>
		<method name="getCurrentActionSet">
			<return type="int">
			</return>
			<argument index="0" name="controllerHandle" type="int">
			</argument>
			<description>
				Get the currently active action set for the specified controller.
				Returns the handle ID.
			</description>
		</method>
		<method name="getCurrentBatteryPower">
			<return type="int">
			</return>
			<description>
				Get the amount of battery power, clearly for laptops.
			</description>
		</method>
		<method name="getCurrentBetaName">
			<return type="String">
			</return>
			<description>
				Checks if the user is running from a beta branch, and gets the name of the branch if they are.
			</description>
		</method>
		<method name="getCurrentGameLanguage">
			<return type="String">
			</return>
			<description>
				Get the user's current game language (ie. english, russian, french).
				Returns two-letter country language code.
			</description>
		</method>
		<method name="getDLCCount">
			<return type="int">
			</return>
			<description>
				Get the total number of DLC installed for this application or game.
			</description>
		</method>
		<method name="getDLCDataByIndex">
			<return type="Array">
			</return>
			<description>
				Get metadata for a DLC, by index.
				Returns an [Array] of dictionaries with ID, available or not, and name.
			</description>
		</method>
		<method name="getDLCDownloadProgress">
			<return type="Dictionary">
			</return>
			<argument index="0" name="appID" type="int">
			</argument>
			<description>
				Gets the download progress for optional DLC.
				Returns success, downloaded, and total.
			</description>
		</method>
		<method name="getDigitalActionData">
			<return type="Dictionary">
			</return>
			<argument index="0" name="controllerHandle" type="int">
			</argument>
			<argument index="1" name="digitalActionHandle" type="int">
			</argument>
			<description>
				Gets the current state of the supplied digital game action.
				Contains state and active.
			</description>
		</method>
		<method name="getDigitalActionHandle">
			<return type="int">
			</return>
			<argument index="0" name="actionName" type="String">
			</argument>
			<description>
				Get the handle of the specified digital action
				Returns the handle ID.
			</description>
		</method>
		<method name="getDigitalActionOrigins">
			<return type="Array">
			</return>
			<argument index="0" name="controllerHandle" type="int">
			</argument>
			<argument index="1" name="actionSetHandle" type="int">
			</argument>
			<argument index="2" name="digitalActionHandle" type="int">
			</argument>
			<description>
				Get the origin(s) for an analog action within an action.
				Returns handle IDs.
			</description>
		</method>
		<method name="getDownloadedLeaderboardEntry">
			<return type="void">
			</return>
			<argument index="0" name="handle" type="int">
			</argument>
			<argument index="1" name="entryCount" type="int">
			</argument>
			<description>
				Once all entries are accessed, the data will be freed up and the handle will become invalid, use this to store it.
			</description>
		</method>
		<method name="getEarliestPurchaseUnixTime">
			<return type="int">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Get the datetime of the purchase of the app.
				Returns the Unix timestamp.
			</description>
		</method>
		<method name="getFavoriteGames">
			<return type="Array">
			</return>
			<description>
				Get an [Array] of the user's favorite game servers.
				Returns a list of dictionaries, each containing IP address, port, query port, flags, and last played.
			</description>
		</method>
		<method name="getFileCount">
			<return type="int">
			</return>
			<description>
				Get the number of files saved on Steam Cloud.
				Returns the number of files present for the current user, including files in subfolders.
			</description>
		</method>
		<method name="getFileDetails">
			<return type="void">
			</return>
			<argument index="0" name="filename" type="String">
			</argument>
			<description>
				Asynchronously retrieves metadata details about a specific file in the depot manifest.
				Triggers [code]file_details_result[/code] callback.
			</description>
		</method>
		<method name="getFileNameAndSize">
			<return type="Dictionary">
			</return>
			<argument index="0" name="file" type="int">
			</argument>
			<description>
				Gets the file name and size of a file from the index.
			</description>
		</method>
		<method name="getFileSize">
			<return type="int">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Get the size of the current file.
				Returns the file size in bytes.
			</description>
		</method>
		<method name="getFileTimestamp">
			<return type="int">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Get the timestamp of when the file was uploaded.
				Returns datetime in Unix format.
			</description>
		</method>
		<method name="getFollowerCount">
			<return type="void">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Gets the number of users following the specified user.
				Triggers [code]get_follower_count[/code] callback.
			</description>
		</method>
		<method name="getFriendByIndex">
			<return type="int">
			</return>
			<argument index="0" name="friendNum" type="int">
			</argument>
			<argument index="1" name="friendFlags" type="int">
			</argument>
			<description>
				Get the Steam ID of a user.
			</description>
		</method>
		<method name="getFriendCount">
			<return type="int">
			</return>
			<description>
				Get the number of friends the user has.
			</description>
		</method>
		<method name="getFriendCountFromSource">
			<return type="int">
			</return>
			<argument index="0" name="sourceID" type="int">
			</argument>
			<description>
				Iterator for getting users in a chat room, lobby, game server or clan. The clansID can actually be the Steam ID of a group, game server, lobby, or chat room.
			</description>
		</method>
		<method name="getFriendFromSourceByIndex">
			<return type="int">
			</return>
			<argument index="0" name="sourceID" type="int">
			</argument>
			<argument index="1" name="friendNum" type="int">
			</argument>
			<description>
				Same as getFriendCountFromSource except it requires a specific number for iteration.
			</description>
		</method>
		<method name="getFriendGamePlayed">
			<return type="Dictionary">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Gets the details of a friend playing a joinable game.
				If friend is in a valid lobby, it returns a [Dictionary] containing the game ID, IP address, game port, query port, and lobby ID.
			</description>
		</method>
		<method name="getFriendPersonaName">
			<return type="String">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Get the given user's Steam username.
			</description>
		</method>
		<method name="getFriendPersonaNameHistory">
			<return type="String">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="nameHistory" type="int">
			</argument>
			<description>
				Accesses old friends names; returns an empty String when there are no more items in the history.
			</description>
		</method>
		<method name="getFriendPersonaState">
			<return type="int">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Returns the current status of the specified user.
				Should be one of the following:
				0 - Offline
				1 - Online
				2 - Busy
				3 - Away
				4 - Snooze
				5 - Looking For Trade
				6 - Looking for Play
			</description>
		</method>
		<method name="getFriendRelationship">
			<return type="int">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Returns a relationship to a user.
				Should be one of the following:
				0 - None
				1 - Blocked
				2 - Request Recipient
				3 - Friend
				4 - Request Initiator
				5 - Ignored
				6 - Ignored Friend
				7 - Suggested
				8 - Max
			</description>
		</method>
		<method name="getFriendRichPresence">
			<return type="String">
			</return>
			<argument index="0" name="friendID" type="int">
			</argument>
			<argument index="1" name="key" type="String">
			</argument>
			<description>
				Get a Rich Presence value from a specified friend (typically only used for debugging).
			</description>
		</method>
		<method name="getFriendRichPresenceKeyByIndex">
			<return type="String">
			</return>
			<argument index="0" name="friendID" type="int">
			</argument>
			<argument index="1" name="key" type="int">
			</argument>
			<description>
				Gets an empty [code]string[/code] if the index is invalid or the specified user has no Rich Presence data available.
			</description>
		</method>
		<method name="getFriendRichPresenceKeyCount">
			<return type="int">
			</return>
			<argument index="0" name="friendID" type="int">
			</argument>
			<description>
				Gets the number of Rich Presence keys that are set on the specified user.
			</description>
		</method>
		<method name="getFriendSteamLevel">
			<return type="int">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Get friend's steam level, obviously.
			</description>
		</method>
		<method name="getGameBadgeLevel">
			<return type="int">
			</return>
			<argument index="0" name="series" type="int">
			</argument>
			<argument index="1" name="foil" type="bool">
			</argument>
			<description>
				Trading Card badges data access, if you only have one set of cards, the series will be 1.
			</description>
		</method>
		<method name="getGlobalStatFloat">
			<return type="float">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Gets the lifetime totals for an aggregated stat.
			</description>
		</method>
		<method name="getGlobalStatFloatHistory">
			<return type="float">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Gets the daily history for an aggregated stat.
			</description>
		</method>
		<method name="getIPCCallCount">
			<return type="int">
			</return>
			<description>
				Returns the number of IPC calls made since the last time this function was called.
			</description>
		</method>
		<method name="getIPCountry">
			<return type="String">
			</return>
			<description>
				Get the user's country by IP.
			</description>
		</method>
		<method name="getImageRGBA">
			<return type="Dictionary">
			</return>
			<argument index="0" name="image" type="int">
			</argument>
			<description>
				Gets the image bytes from an image handle.
				Returns the buffer.
			</description>
		</method>
		<method name="getImageSize">
			<return type="Dictionary">
			</return>
			<argument index="0" name="image" type="int">
			</argument>
			<description>
				Gets the size of a Steam image handle.
				Returns the width and height.
			</description>
		</method>
		<method name="getInputTypeForHandle">
			<return type="int">
			</return>
			<argument index="0" name="controllerHandle" type="int">
			</argument>
			<description>
				Get the input type (device model) for the specified controller.
			</description>
		</method>
		<method name="getInstalledDepots">
			<return type="Array">
			</return>
			<argument index="0" name="appID" type="int">
			</argument>
			<description>
				Gets a list of all installed depots for a given App ID.
				Returns the app ID's
			</description>
		</method>
		<method name="getItemDownloadInfo">
			<return type="Dictionary">
			</return>
			<argument index="0" name="fileID" type="int">
			</argument>
			<description>
				Get info about a pending download of a workshop item that has k_EItemStateNeedsUpdate set.
				Contains the bytes downloaded and total bytes.
			</description>
		</method>
		<method name="getItemInstallInfo">
			<return type="Dictionary">
			</return>
			<argument index="0" name="fileID" type="int">
			</argument>
			<description>
				Gets info about currently installed content on the disc for workshop items that have k_EItemStateInstalled set.
				Contains the size, folder name, folder size, and timestamp in UNIX time.
			</description>
		</method>
		<method name="getItemState">
			<return type="int">
			</return>
			<argument index="0" name="publishedFileID" type="int">
			</argument>
			<description>
				Gets the current state of a workshop item on this client.
				Should return one of the following:
				0 - None
				1 - Subscribed
				2 - Legacy
				4 - Installed
				8 - Update
				16 - Downloading
				32 - Pending
			</description>
		</method>
		<method name="getItemUpdateProgress">
			<return type="Dictionary">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<description>
				Gets the progress of an item update.
				Contains the status, bytes processed, bytes total.
			</description>
		</method>
		<method name="getLargeFriendAvatar">
			<return type="int">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Gets the large (184x184) avatar of the current user, which is a handle to be used in GetImageRGBA(), or 0 if none set.
			</description>
		</method>
		<method name="getLaunchQueryParam">
			<return type="String">
			</return>
			<argument index="0" name="key" type="String">
			</argument>
			<description>
				Gets the associated launch parameter if the game is run via [code]steam://run//?param1=value1;param2=value2;param3=value3[/code] etc.
			</description>
		</method>
		<method name="getLeaderboardDisplayType">
			<return type="int">
			</return>
			<description>
				Returns the display type of a leaderboard handle.
			</description>
		</method>
		<method name="getLeaderboardEntries">
			<return type="Array">
			</return>
			<description>
				Get the currently used leaderboard entries.
			</description>
		</method>
		<method name="getLeaderboardEntryCount">
			<return type="int">
			</return>
			<description>
				Get the total number of entries in a leaderboard, as of the last request.
			</description>
		</method>
		<method name="getLeaderboardHandle">
			<return type="int">
			</return>
			<description>
				Get the currently used leaderboard handle.
			</description>
		</method>
		<method name="getLeaderboardName">
			<return type="String">
			</return>
			<description>
				Get the name of a leaderboard.
			</description>
		</method>
		<method name="getLeaderboardSortMethod">
			<return type="int">
			</return>
			<description>
				Returns the sort order of a leaderboard handle.
			</description>
		</method>
		<method name="getLobbyData">
			<return type="String">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="key" type="String">
			</argument>
			<description>
				Get data associated with this lobby.
			</description>
		</method>
		<method name="getLobbyDataByIndex">
			<return type="Dictionary">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<description>
				Get lobby data by the lobby's ID.
				Contains the count, key, and value.
			</description>
		</method>
		<method name="getLobbyGameServer">
			<return type="Dictionary">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<description>
				Gets the details of a game server set in a lobby.
				Returns [code]false[/code] if there is no game server set or that lobby doesn't exist. Otherwise it returns the lobby's Steam ID, IP address, and port.
			</description>
		</method>
		<method name="getLobbyMemberByIndex">
			<return type="int">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="member" type="int">
			</argument>
			<description>
				Gets the Steam ID of a user in the lobby.
			</description>
		</method>
		<method name="getLobbyMemberData">
			<return type="String">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="steamIDUser" type="int">
			</argument>
			<argument index="2" name="key" type="String">
			</argument>
			<description>
				Gets per-user metadata for someone in this lobby.
			</description>
		</method>
		<method name="getLobbyMemberLimit">
			<return type="int">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<description>
				Returns the current limit on the # of users who can join the lobby.
				Returns 0 if no limit is defined.
			</description>
		</method>
		<method name="getLobbyOwner">
			<return type="int">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<description>
				Get the current lobby owner.
				Returns owner's Steam ID.
			</description>
		</method>
		<method name="getMediumFriendAvatar">
			<return type="int">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Gets the medium (64x64) avatar of the current user, which is a handle to be used in GetImageRGBA(), or 0 if none set.
			</description>
		</method>
		<method name="getMostAchievedAchievementInfo">
			<return type="Array">
			</return>
			<description>
				Gets the info on the most achieved achievement for the game.
				Returns an [Array] of dictionaries with an int for rank, [STRING] as name, int as percent, and [BOOl] as achieved or not.
			</description>
		</method>
		<method name="getMotionData">
			<return type="Dictionary">
			</return>
			<argument index="0" name="controllerHandle" type="int">
			</argument>
			<description>
				Get raw motion data for the specified controller.
				Contains rotQuatX, rotQuatY, rotQuatZ, rotQuatW, posAccelX, posAccelY, posAccelZ, rotVelX, rotVelY, and rotVelZ.
			</description>
		</method>
		<method name="getNumAchievements">
			<return type="int">
			</return>
			<description>
				Get the number of achievements.
			</description>
		</method>
		<method name="getNumLobbyMembers">
			<return type="int">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<description>
				Lobby iteration; for viewing details of users in a lobby.
			</description>
		</method>
		<method name="getNumberOfCurrentPlayers">
			<return type="void">
			</return>
			<description>
				Get the amount of players currently playing the current game (online + offline).
				Triggers [code]number_of_current_players[/code] callback.
			</description>
		</method>
		<method name="getP2PSessionState">
			<return type="Dictionary">
			</return>
			<argument index="0" name="steamIDRemote" type="int">
			</argument>
			<description>
				Fills out a P2PSessionState_t structure with details about the connection like whether or not there is an active connection.
				Returns [code]false[/code] if there is no P2P session active. Otherwise it contains a connection active bool, connecting bool (if trying to establish a connection), a session, whether it is using a relay, bytes queued for sending, packets queued for sending, the remote IP, and the remote port.
			</description>
		</method>
		<method name="getPersonaName">
			<return type="String">
			</return>
			<description>
				Get the user's Steam username.
			</description>
		</method>
		<method name="getPersonaState">
			<return type="int">
			</return>
			<description>
				Gets the status of the current user.
				Should be one of the following:
				0 - Offline
				1 - Online
				2 - Busy
				3 - Away
				4 - Snooze
				5 - Looking For Trade
				6 - Looking for Play
			</description>
		</method>
		<method name="getPlayerAvatar">
			<return type="void">
			</return>
			<argument index="0" name="size" type="int" default="1">
			</argument>
			<argument index="1" name="steamID" type="int" default="0">
			</argument>
			<description>
				Get player's avatar.
				Triggers [code]avatar_loaded[/code] callback.
			</description>
		</method>
		<method name="getPlayerNickname">
			<return type="String">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Returns nickname the current user has set for the specified player. Returns NULL if the no nickname has been set for that player.
			</description>
		</method>
		<method name="getPlayerSteamLevel">
			<return type="int">
			</return>
			<description>
				Get the user's Steam level.
			</description>
		</method>
		<method name="getQueryUGCAdditionalPreview">
			<return type="Dictionary">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="index" type="int">
			</argument>
			<argument index="2" name="previewIndex" type="int">
			</argument>
			<description>
				Retrieve the details of an additional preview associated with an individual workshop item after receiving a querying UGC call result.
				Contains the success or failure, item handle, index, the preview index, the URL or video ID, the original filename, and preview type.
			</description>
		</method>
		<method name="getQueryUGCChildren">
			<return type="Dictionary">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="index" type="int">
			</argument>
			<description>
				Retrieve the ids of any child items of an individual workshop item after receiving a querying UGC call result. These items can either be a part of a collection or some other dependency (see AddDependency).
				Contains the success or failure, the item handle, index, and children.
			</description>
		</method>
		<method name="getQueryUGCKeyValueTag">
			<return type="Dictionary">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="index" type="int">
			</argument>
			<argument index="2" name="keyValueTagIndex" type="int">
			</argument>
			<description>
				Retrieve the details of a key-value tag associated with an individual workshop item after receiving a querying UGC call result.
				Contains the success or failure, the item handle, index, the key/value tag index, the key, and the value.
			</description>
		</method>
		<method name="getQueryUGCMetadata">
			<return type="String">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="index" type="int">
			</argument>
			<description>
				Retrieve the developer set metadata of an individual workshop item after receiving a querying UGC call result.
			</description>
		</method>
		<method name="getQueryUGCNumAdditionalPreviews">
			<return type="int">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="index" type="int">
			</argument>
			<description>
				Retrieve the number of additional previews of an individual workshop item after receiving a querying UGC call result.
			</description>
		</method>
		<method name="getQueryUGCNumKeyValueTags">
			<return type="int">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="index" type="int">
			</argument>
			<description>
				Retrieve the number of key-value tags of an individual workshop item after receiving a querying UGC call result.
			</description>
		</method>
		<method name="getQueryUGCPreviewURL">
			<return type="String">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="index" type="int">
			</argument>
			<description>
				Retrieve the URL to the preview image of an individual workshop item after receiving a querying UGC call result.
			</description>
		</method>
		<method name="getQueryUGCResult">
			<return type="Dictionary">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="index" type="int">
			</argument>
			<description>
				Retrieve the details of an individual workshop item after receiving a querying UGC call result.
				You should call this in a loop to get the details of all the workshop items returned.
				This must only be called with the handle obtained from a successful [code]ugc_query_completed[/code] call result.
			</description>
		</method>
		<method name="getQueryUGCStatistic">
			<return type="Dictionary">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="index" type="int">
			</argument>
			<argument index="2" name="statType" type="int">
			</argument>
			<description>
				Retrieve various statistics of an individual workshop item after receiving a querying UGC call result.
				Contains the success or failure, the item handle, index, type, and value.
			</description>
		</method>
		<method name="getQuota">
			<return type="Dictionary">
			</return>
			<description>
				Gets the number of bytes available, and used on the users Steam Cloud storage.
				Returns the total and used bytes.
			</description>
		</method>
		<method name="getRecentPlayers">
			<return type="Array">
			</return>
			<description>
				Get list of players user has recently played game with.
				Returns a list of dictionaries, each containing Steam ID, name, time, and status.
			</description>
		</method>
		<method name="getSecondsSinceAppActive">
			<return type="int">
			</return>
			<description>
				Time since application or game was started.
				Returns time in seconds.
			</description>
		</method>
		<method name="getSecondsSinceComputerActive">
			<return type="int">
			</return>
			<description>
				Time since the user last moved the mouse.
				Returns time in seconds.
			</description>
		</method>
		<method name="getServerRealTime">
			<return type="int">
			</return>
			<description>
				Get the actual time.
				Returns UNIX time from Steam servers.
			</description>
		</method>
		<method name="getSessionClientFormFactor">
			<return type="int">
			</return>
			<argument index="0" name="sessionID" type="int">
			</argument>
			<description>
				Get the form factor of the session client device.
				Should return one of the following:
				0 - Unknown
				1 - Phone
				2 - Tablet
				3 - Computer
				4 - TV
			</description>
		</method>
		<method name="getSessionClientName">
			<return type="String">
			</return>
			<argument index="0" name="sessionID" type="int">
			</argument>
			<description>
				Get the name of the session client device.
			</description>
		</method>
		<method name="getSessionClientResolution">
			<return type="Dictionary">
			</return>
			<argument index="0" name="sessionID" type="int">
			</argument>
			<description>
				Get the resolution, in pixels, of the session client device. This is set to 0x0 if the resolution is not available.
				Contains a bool for success or not, int for resolution width, and int for resolution height.
			</description>
		</method>
		<method name="getSessionCount">
			<return type="int">
			</return>
			<description>
				Get the number of currently connected Steam Remote Play sessions.
			</description>
		</method>
		<method name="getSessionID">
			<return type="int">
			</return>
			<argument index="0" name="index" type="int">
			</argument>
			<description>
				Get the currently connected Steam Remote Play session ID at the specified index.
			</description>
		</method>
		<method name="getSessionSteamID">
			<return type="int">
			</return>
			<argument index="0" name="sessionID" type="int">
			</argument>
			<description>
				Get the SteamID of the connected user.
			</description>
		</method>
		<method name="getSmallFriendAvatar">
			<return type="int">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Gets the small (32x32) avatar of the current user, which is a handle to be used in GetImageRGBA(), or 0 if none set.
			</description>
		</method>
		<method name="getStatFloat">
			<return type="float">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Get the value of a float statistic.
			</description>
		</method>
		<method name="getStatInt">
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Get the value of an integer statistic.
			</description>
		</method>
		<method name="getSteamID">
			<return type="int">
			</return>
			<description>
				Get the user's Steam ID (ID64).
			</description>
		</method>
		<method name="getSteamUILanguage">
			<return type="String">
			</return>
			<description>
				Get the Steam user interface language.
				Should return two-letter language code.
			</description>
		</method>
		<method name="getSubscribedItems">
			<return type="Array">
			</return>
			<description>
				Gets the total number of items the current user is subscribed to for the game or application.
			</description>
		</method>
		<method name="getSyncPlatforms">
			<return type="int">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Obtains the platforms that the specified file will synchronize to.
				Should return one of the following:
				0 - None
				1 0 - Windows
				1 1 - OSX
				1 2 - PS3
				1 3 - Linux
				1 4 - Reserved
				0xffffffff - All
			</description>
		</method>
		<method name="getUserAchievement">
			<return type="Dictionary">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="name" type="String">
			</argument>
			<description>
				Gets the unlock status of the Achievement.
				Returns a [Dictionary] with an int for Steam ID, bool for success or not, [STRING] for name, and bool for achieved or not.
			</description>
		</method>
		<method name="getUserAchievementAndUnlockTime">
			<return type="Dictionary">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="name" type="String">
			</argument>
			<description>
				Gets the achievement status, and the time it was unlocked if unlocked.
				Returns a [Dictionary] with a bool for success or not, [STRING] for name, bool for achieved or not, int for unlocked.
			</description>
		</method>
		<method name="getUserDataFolder">
			<return type="String">
			</return>
			<description>
				Get the user's Steam installation path.
			</description>
		</method>
		<method name="getUserFriendsGroups">
			<return type="Array">
			</return>
			<description>
				Get list of friends groups (tags) the user has created. This is not to be confused with Steam groups.
				Returns a list of dictionaries, each  containing Steam ID, name, and members.
			</description>
		</method>
		<method name="getUserItemVote">
			<return type="void">
			</return>
			<argument index="0" name="publishedFileID" type="int">
			</argument>
			<description>
				Gets the users vote status on a workshop item.
				Triggers [code]get_item_vote_result[/code] callback.
			</description>
		</method>
		<method name="getUserRestrictions">
			<return type="int">
			</return>
			<description>
				If current user is chat restricted, they can't send or receive any text or voice chat messages. The user can't see custom avatars. But the user can be online and send or receive game invites. A chat restricted user cannot add friends or join any groups.
				INT; it should be one of the following:
				0 - None
				1 - Unknown
				2 - Any Chat
				4 - Voice Chat
				8 - Group Chat
				16 - Rating
				32 - Game Invites
				64 - Trading
			</description>
		</method>
		<method name="getUserStatFloat">
			<return type="float">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="name" type="String">
			</argument>
			<description>
				Gets the current value of a float stat for the specified user.
			</description>
		</method>
		<method name="getUserStatInt">
			<return type="int">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="name" type="String">
			</argument>
			<description>
				Gets the current value of an integer stat for the specified user.
			</description>
		</method>
		<method name="getUserSteamFriends">
			<return type="Array">
			</return>
			<description>
				Get a list of user's Steam friends; a mix of different Steamworks API friend functions.
				Returns a list of dictionaries, each containing Steam ID, name, and status.
			</description>
		</method>
		<method name="getUserSteamGroups">
			<return type="Array">
			</return>
			<description>
				Get list of user's Steam groups; a mix of different Steamworks API group functions.
				Returns a list of dictionaries, each  containing Steam ID, name, and tag.
			</description>
		</method>
		<method name="hasFriend">
			<return type="bool">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="friendFlags" type="int">
			</argument>
			<description>
				Returns [code]true[/code] if the specified user meets any of the criteria specified in friendFlags:
				0x00 - None
				0x01 - Blocked
				0x02 - Friendship Requested
				0x04 - Immediate
				0x08 - Clan Member
				0x10 - On Game Server
				0x80 - Requesting Friendship
				0x100 - Requesting Info
				0x200 - Ignored
				0x400 - Ignored Friend
				0x0000 - Chat Member
				0xFFFF - All
				Return [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="hookScreenshots">
			<return type="void">
			</return>
			<argument index="0" name="hook" type="bool">
			</argument>
			<description>
				Toggles whether the overlay handles screenshots.
			</description>
		</method>
		<method name="indicateAchievementProgress">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="currentProgress" type="int">
			</argument>
			<argument index="2" name="maxProgress" type="int">
			</argument>
			<description>
				Achievement progress, triggers an AchievementProgress callback, that is all. Calling this with X out of X progress will NOT set the achievement, the game must still do that.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="init">
			<return type="bool">
			</return>
			<description>
				Start SteamControllers interface.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="initWorkshopForGameServer">
			<return type="bool">
			</return>
			<argument index="0" name="workshopDepotID" type="int">
			</argument>
			<description>
				Lets game servers set a specific workshop folder before issuing any UGC commands.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="installDLC">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Install control for optional DLC.
				Triggers [code]dlc_installed[/code] callback.
			</description>
		</method>
		<method name="inviteUserToGame">
			<return type="bool">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="connectString" type="String">
			</argument>
			<description>
				Invite friend to current game/lobby.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="inviteUserToLobby">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="steamIDInvitee" type="int">
			</argument>
			<description>
				Invite another user to the lobby. The target user will receive a [code]lobby_invite[/code] callback.
				Returns [code]true[/code] if the invite is successfully sent, whether or not the target responds.
			</description>
		</method>
		<method name="isAppInstalled">
			<return type="bool">
			</return>
			<argument index="0" name="appID" type="int">
			</argument>
			<description>
				Check if given application or game is installed, not necessarily owned.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isClanChatAdmin">
			<return type="bool">
			</return>
			<argument index="0" name="chatID" type="int">
			</argument>
			<argument index="1" name="steamID" type="int">
			</argument>
			<description>
				Checks if a user in the Steam group chat room is an admin.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isClanChatWindowOpenInSteam">
			<return type="bool">
			</return>
			<argument index="0" name="chatID" type="int">
			</argument>
			<description>
				Checks if the Steam Group chat room is open in the Steam UI.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isClanOfficialGameGroup">
			<return type="bool">
			</return>
			<argument index="0" name="clanID" type="int">
			</argument>
			<description>
				Checks if the Steam group is an official game group/community hub.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isClanPublic">
			<return type="bool">
			</return>
			<argument index="0" name="clanID" type="int">
			</argument>
			<description>
				Checks if the Steam group is public.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isCloudEnabledForAccount">
			<return type="bool">
			</return>
			<description>
				Check if Cloud Saves/Storage is enabled for the user's account.
				Returns [code]true[/code] if enabled or [code]false[/code] if not.
			</description>
		</method>
		<method name="isCloudEnabledForApp">
			<return type="bool">
			</return>
			<description>
				Check if Cloud Saves/Storage is enabled for the application.
				Returns [code]true[/code] if enabled or [code]false[/code] if not.
			</description>
		</method>
		<method name="isCybercafe">
			<return type="bool">
			</return>
			<description>
				Checks whether the current App ID is for Cyber Cafes.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isDLCInstalled">
			<return type="bool">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Checks if the user owns a specific DLC and if the DLC is installed.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isFollowing">
			<return type="void">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Checks if the current user is following the specified user.
				Triggers [code]is_following[/code] callback.
			</description>
		</method>
		<method name="isLowViolence">
			<return type="bool">
			</return>
			<description>
				Checks if the license owned by the user provides low violence depots.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isOverlayEnabled">
			<return type="bool">
			</return>
			<description>
				Check if Steam overlay is enabled.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isScreenshotsHooked">
			<return type="bool">
			</return>
			<description>
				Checks if the app is hooking screenshots.
				Returns [code]true[/code] of [code]false[/code].
			</description>
		</method>
		<method name="isSteamInBigPictureMode">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if Steam and the Steam Overlay are running in Big Picture mode.
			</description>
		</method>
		<method name="isSteamRunning">
			<return type="bool">
			</return>
			<description>
				Check if the Steam client is running. Returns 1 if so and 0 if not.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isSteamRunningInVR">
			<return type="bool">
			</return>
			<description>
				Is Steam running in VR?
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isSubscribed">
			<return type="bool">
			</return>
			<description>
				Checks if the active user is subscribed to the current App ID.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isSubscribedApp">
			<return type="bool">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Checks ownership of another game related to yours: a demo, etc.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isSubscribedFromFreeWeekend">
			<return type="bool">
			</return>
			<description>
				Checks if the user is subscribed to the current app through a free weekend.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isUserInSource">
			<return type="bool">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="sourceID" type="int">
			</argument>
			<description>
				Find out if the local user can see that steamIDUser is a member or in steamIDSource.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isVACBanned">
			<return type="bool">
			</return>
			<description>
				Does the user have a VAC ban for this game.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="isVRHeadsetStreamingEnabled">
			<return type="bool">
			</return>
			<description>
				Checks if the HMD view will be streamed via Steam In-Home Streaming.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="joinClanChatRoom">
			<return type="void">
			</return>
			<argument index="0" name="clanID" type="int">
			</argument>
			<description>
				Allows the user to join Steam group (clan) chats right within the game.
				Triggers [code]join_clan_chat_complete[/code]
			</description>
		</method>
		<method name="joinLobby">
			<return type="void">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<description>
				Join an existing lobby.
				Triggers [code]lobby_joined[/code] callback for other users.
			</description>
		</method>
		<method name="leaveClanChatRoom">
			<return type="bool">
			</return>
			<argument index="0" name="clanID" type="int">
			</argument>
			<description>
				Leaves a Steam group chat that the user has previously entered with JoinClanChatRoom.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="leaveLobby">
			<return type="void">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<description>
				Leave a lobby, this will take effect immediately on the client side, other users will be notified by callback.
				Callback has not been enabled yet.
			</description>
		</method>
		<method name="loggedOn">
			<return type="bool">
			</return>
			<description>
				Check if user is logged into Steam currently.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="markContentCorrupt">
			<return type="bool">
			</return>
			<argument index="0" name="missingFilesOnly" type="bool">
			</argument>
			<description>
				Allows you to force verify game content on next launch. Returns [code]true[/code]/false depending on success.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="musicGetVolume">
			<return type="float">
			</return>
			<description>
				Get the volume level of the music.
			</description>
		</method>
		<method name="musicIsEnabled">
			<return type="bool">
			</return>
			<description>
				Is Steam music enabled?
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="musicIsPlaying">
			<return type="bool">
			</return>
			<description>
				Is Steam music playing something?
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="musicPause">
			<return type="void">
			</return>
			<description>
				Pause whatever Steam music is playing.
			</description>
		</method>
		<method name="musicPlay">
			<return type="void">
			</return>
			<description>
				Play current track/album.
			</description>
		</method>
		<method name="musicPlayNext">
			<return type="void">
			</return>
			<description>
				Play next track/album.
			</description>
		</method>
		<method name="musicPlayPrev">
			<return type="void">
			</return>
			<description>
				Play previous track/album.
			</description>
		</method>
		<method name="musicSetVolume">
			<return type="void">
			</return>
			<argument index="0" name="value" type="float">
			</argument>
			<description>
				Set the volume of Steam music. Must pass a float between 0.0 and 1.0.
			</description>
		</method>
		<method name="openClanChatWindowInSteam">
			<return type="bool">
			</return>
			<argument index="0" name="chatID" type="int">
			</argument>
			<description>
				Opens the specified Steam group chat room in the Steam UI.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="overlayNeedsPresent">
			<return type="bool">
			</return>
			<description>
				Checks if the Overlay needs a present. Only required if using event driven render updates.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="readP2PPacket">
			<return type="Dictionary">
			</return>
			<argument index="0" name="packet" type="int">
			</argument>
			<argument index="1" name="channel" type="int">
			</argument>
			<description>
				Reads in a packet that has been sent from another user via SendP2PPacket.
				Returns empty if there was an error. Otherwise contains the packet data and the user's Steam ID.
			</description>
		</method>
		<method name="releaseQueryUGCRequest">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<description>
				Releases a UGC query handle when you are done with it to free up memory.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="removeAppDependency">
			<return type="void">
			</return>
			<argument index="0" name="publishedFileID" type="int">
			</argument>
			<argument index="1" name="appID" type="int">
			</argument>
			<description>
				Removes the dependency between the given item and the appid. This list of dependencies can be retrieved by calling GetAppDependencies.
				Triggers [code]remove_app_dependency_result[/code] callback.
			</description>
		</method>
		<method name="removeDependency">
			<return type="void">
			</return>
			<argument index="0" name="publishedFileID" type="int">
			</argument>
			<argument index="1" name="childPublishedFileID" type="int">
			</argument>
			<description>
				Removes a workshop item as a dependency from the specified item.
				Triggers [code]remove_ugc_dependency_result[/code] callback.
			</description>
		</method>
		<method name="removeFavoriteGame">
			<return type="bool">
			</return>
			<argument index="0" name="appID" type="int">
			</argument>
			<argument index="1" name="ip" type="int">
			</argument>
			<argument index="2" name="port" type="int">
			</argument>
			<argument index="3" name="queryPort" type="int">
			</argument>
			<argument index="4" name="flags" type="int">
			</argument>
			<description>
				Removes the game server from the local storage.
				Returns [code]true[/code] if it was removed or [code]false[/code] if not.
			</description>
		</method>
		<method name="removeItemFromFavorites">
			<return type="void">
			</return>
			<argument index="0" name="appID" type="int">
			</argument>
			<argument index="1" name="publishedFileID" type="int">
			</argument>
			<description>
				Removes a workshop item from the users favorites list.
				Triggers [code]user_favorite_items_list_changed[/code] callback.
			</description>
		</method>
		<method name="removeItemKeyValueTags">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="key" type="String">
			</argument>
			<description>
				Removes an existing key value tag from an item.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="removeItemPreview">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="index" type="int">
			</argument>
			<description>
				Removes an existing preview from an item.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="replyToFriendMessage">
			<return type="bool">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="message" type="String">
			</argument>
			<description>
				Sends a message to a Steam friend.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="requestClanOfficerList">
			<return type="void">
			</return>
			<argument index="0" name="clanID" type="int">
			</argument>
			<description>
				Requests information about a clan officer list; when complete, data is returned in ClanOfficerListResponse_t call result.
				Triggers [code]request_clan_officer_list[/code] callback.
			</description>
		</method>
		<method name="requestCurrentStats">
			<return type="bool">
			</return>
			<description>
				Request all statistics and achievements from Steam servers.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="requestFriendRichPresence">
			<return type="void">
			</return>
			<argument index="0" name="friendID" type="int">
			</argument>
			<description>
				Requests rich presence for a specific user.
			</description>
		</method>
		<method name="requestGlobalAchievementPercentages">
			<return type="void">
			</return>
			<description>
				Asynchronously fetch the data for the percentages.
				Triggers [code]global_achievement_percentages_ready[/code] callback.
			</description>
		</method>
		<method name="requestGlobalStats">
			<return type="void">
			</return>
			<argument index="0" name="historyDays" type="int">
			</argument>
			<description>
				Asynchronously fetches global stats data, which is available for stats marked as "aggregated" in the App Admin panel of the Steamworks website.  The limit is 60.
				Triggers [code]global_stats_received[/code] callback.
			</description>
		</method>
		<method name="requestLobbyData">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<description>
				Refreshes metadata for a lobby you're not necessarily in right now.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="requestLobbyList">
			<return type="void">
			</return>
			<description>
				Get a list of relevant lobbies.
				Triggers [code]lobby_match_list[/code] callback.
			</description>
		</method>
		<method name="requestUserInformation">
			<return type="bool">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="requireNameOnly" type="bool">
			</argument>
			<description>
				Requests information about a user, basically the persona name and avatar. If requireNameOnly is set, then the avatar of a user isn't downloaded.
				Returns [code]true[/code] or [code]false[/code]. Should trigger a callback, but currently does not.
			</description>
		</method>
		<method name="requestUserStats">
			<return type="void">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Asynchronously downloads stats and achievements for the specified user from the server.
				Triggers [code]user_stats_received[/code] callback.
			</description>
		</method>
		<method name="resetAllStats">
			<return type="bool">
			</return>
			<argument index="0" name="achievementsToo" type="bool">
			</argument>
			<description>
				Reset all Steam statistics; optional to reset achievements.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="restartAppIfNecessary">
			<return type="bool">
			</return>
			<argument index="0" name="appID" type="int">
			</argument>
			<description>
				Checks if your executable was launched through Steam and relaunches it through Steam if it wasn't.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="runFrame">
			<return type="void">
			</return>
			<description>
				Syncronize controllers.
			</description>
		</method>
		<method name="run_callbacks">
			<return type="void">
			</return>
			<description>
				This should be run often; best if called in the _process(delta) function.
			</description>
		</method>
		<method name="sendClanChatMessage">
			<return type="bool">
			</return>
			<argument index="0" name="chatID" type="int">
			</argument>
			<argument index="1" name="text" type="String">
			</argument>
			<description>
				Sends a message to a Steam group chat room.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="sendLobbyChatMsg">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="messageBody" type="String">
			</argument>
			<description>
				Broadcasts a chat message to the all the users in the lobby. Those users should receive a [code]lobby_Message[/code] callback.
				Returns [code]true[/code] if sent successfully or [code]false[/code].
			</description>
		</method>
		<method name="sendP2PPacket">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDRemote" type="int">
			</argument>
			<argument index="1" name="data" type="PoolByteArray">
			</argument>
			<argument index="2" name="sendType" type="int">
			</argument>
			<argument index="3" name="channel" type="int">
			</argument>
			<description>
				Sends a P2P packet to the specified user.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="sendQueryUGCRequest">
			<return type="void">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<description>
				Send a UGC query to Steam.
				Triggers [code]ugc_query_completed[/code] callback.
			</description>
		</method>
		<method name="setAchievement">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Set a given achievement.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setAllowCachedResponse">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="maxAgeSeconds" type="int">
			</argument>
			<description>
				Sets whether results will be returned from the cache for the specific period of time on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setCloudEnabledForApp">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
				Enable or disable Steam Cloud for this application. This must only ever be called as the direct result of the user explicitly requesting that it's enabled or not. This is typically accomplished with a checkbox within your in-game options.
				BOOL.
			</description>
		</method>
		<method name="setCloudFileNameFilter">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="matchCloudFilename" type="String">
			</argument>
			<description>
				Sets to only return items that have a specific filename on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setInGameVoiceSpeaking">
			<return type="void">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="speaking" type="bool">
			</argument>
			<description>
				User is in a game pressing the talk button (will suppress the microphone for all voice comms from the Steam friends UI).
			</description>
		</method>
		<method name="setItemContent">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="contentFolder" type="String">
			</argument>
			<description>
				Sets the folder that will be stored as the content for an item.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setItemDescription">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="description" type="String">
			</argument>
			<description>
				Sets a new description for an item.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setItemMetadata">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="metadata" type="String">
			</argument>
			<description>
				Sets arbitrary metadata for an item. This metadata can be returned from queries without having to download and install the actual content.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setItemPreview">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="previewFile" type="String">
			</argument>
			<description>
				Sets the primary preview image for the item.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setItemTitle">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="title" type="String">
			</argument>
			<description>
				Sets a new title for an item.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setItemUpdateLanguage">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="language" type="String">
			</argument>
			<description>
				Sets the language of the title and description that will be set in this item update.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setItemVisibility">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="visibility" type="int">
			</argument>
			<description>
				Sets the visibility of an item.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setLanguage">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="language" type="String">
			</argument>
			<description>
				Sets the language to return the title and description in for the items on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setLeaderboardDetailsMax">
			<return type="void">
			</return>
			<argument index="0" name="detailsMax" type="int">
			</argument>
			<description>
				Set the max leaderboard details.
			</description>
		</method>
		<method name="setLinkedLobby">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="steamIDLobbyDependent" type="int">
			</argument>
			<description>
				Link two lobbies for the purposes of checking player compatibility.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setListenForFriendsMessages">
			<return type="bool">
			</return>
			<argument index="0" name="intercept" type="bool">
			</argument>
			<description>
				Listens for Steam friends chat messages.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setLobbyData">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="key" type="String">
			</argument>
			<argument index="2" name="value" type="String">
			</argument>
			<description>
				Sets a key/value pair in the lobby metadata.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setLobbyGameServer">
			<return type="void">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="serverIP" type="String">
			</argument>
			<argument index="2" name="serverPort" type="int">
			</argument>
			<argument index="3" name="steamIDGameServer" type="int">
			</argument>
			<description>
				Sets the game server associated with the lobby.
				Triggers [code]lobby_game_created[/code] callback.
			</description>
		</method>
		<method name="setLobbyJoinable">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="joinable" type="bool">
			</argument>
			<description>
				Sets whether or not a lobby is joinable; defaults to [code]true[/code] for a new lobby.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setLobbyMemberData">
			<return type="void">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="key" type="String">
			</argument>
			<argument index="2" name="value" type="String">
			</argument>
			<description>
				Sets per-user metadata (for the local user implicitly).
			</description>
		</method>
		<method name="setLobbyMemberLimit">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="maxMembers" type="int">
			</argument>
			<description>
				Set the limit on the number of users who can join the lobby.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setLobbyOwner">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="steamIDNewOwner" type="int">
			</argument>
			<description>
				Changes who the lobby owner is.
				Returns [code]true[/code] or [code]false[/code] depending on success.
			</description>
		</method>
		<method name="setLobbyType">
			<return type="bool">
			</return>
			<argument index="0" name="steamIDLobby" type="int">
			</argument>
			<argument index="1" name="eLobbyType" type="int">
			</argument>
			<description>
				Updates which type of lobby it is.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setLocation">
			<return type="bool">
			</return>
			<argument index="0" name="screenshot" type="int">
			</argument>
			<argument index="1" name="location" type="String">
			</argument>
			<description>
				Sets optional metadata about a screenshot's location.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setMatchAnyTag">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="matchAnyTag" type="bool">
			</argument>
			<description>
				Sets whether workshop items will be returned if they have one or more matching tag, or if all tags need to match on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setOverlayNotificationInset">
			<return type="void">
			</return>
			<argument index="0" name="horizontal" type="int">
			</argument>
			<argument index="1" name="vertical" type="int">
			</argument>
			<description>
				Sets the inset of the overlay notification from the corner specified by SetOverlayNotificationPosition. Integer should be number of pixels.
			</description>
		</method>
		<method name="setOverlayNotificationPosition">
			<return type="void">
			</return>
			<argument index="0" name="pos" type="int">
			</argument>
			<description>
				Set the position where overlay shows notifications. Accepts the following integer inputs:
				0 - Top Left
				1 - Top Right
				2 - Bottom Left
				3 - Bottom Right
			</description>
		</method>
		<method name="setPersonaName">
			<return type="void">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Sets the player name, stores it on the server and publishes the changes to all friends who are online.
				Triggers [code]name_changed[/code] callback.
			</description>
		</method>
		<method name="setPlayedWith">
			<return type="void">
			</return>
			<argument index="0" name="steamID" type="int">
			</argument>
			<description>
				Set player as 'Played With' for current game.
			</description>
		</method>
		<method name="setRankedByTrendDays">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="days" type="int">
			</argument>
			<description>
				Sets whether the order of the results will be updated based on the rank of items over a number of days on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setReturnAdditionalPreviews">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="returnAdditionalPreviews" type="bool">
			</argument>
			<description>
				Sets whether to return any additional images/videos attached to the items on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setReturnChildren">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="returnChildren" type="bool">
			</argument>
			<description>
				Sets whether to return the IDs of the child items of the items on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setReturnKeyValueTags">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="returnKeyValueTags" type="bool">
			</argument>
			<description>
				Sets whether to return any key-value tags for the items on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setReturnLongDescription">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="returnLongDescription" type="bool">
			</argument>
			<description>
				Sets whether to return the full description for the items on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setReturnMetadata">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="returnMetadata" type="bool">
			</argument>
			<description>
				Sets whether to return the developer specified metadata for the items on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setReturnOnlyIDs">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="returnOnlyIDs" type="bool">
			</argument>
			<description>
				Sets whether to only return IDs instead of all the details on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setReturnPlaytimeStats">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="days" type="int">
			</argument>
			<description>
				Sets whether to return the the playtime stats on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setReturnTotalOnly">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="returnTotalOnly" type="bool">
			</argument>
			<description>
				Sets whether to only return the the total number of matching items on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setRichPresence">
			<return type="bool">
			</return>
			<argument index="0" name="key" type="String">
			</argument>
			<argument index="1" name="value" type="String">
			</argument>
			<description>
				Set the game information in Steam; used in "View Game Info".
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setSearchText">
			<return type="bool">
			</return>
			<argument index="0" name="queryHandle" type="int">
			</argument>
			<argument index="1" name="searchText" type="String">
			</argument>
			<description>
				Sets a String to that items need to match in either the title or the description on a pending UGC Query.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setStatFloat">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="value" type="float">
			</argument>
			<description>
				Set a float statistic.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setStatInt">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="value" type="int">
			</argument>
			<description>
				Set an integer statistic.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="setUserItemVote">
			<return type="void">
			</return>
			<argument index="0" name="publishedFileID" type="int">
			</argument>
			<argument index="1" name="voteUp" type="bool">
			</argument>
			<description>
				Allows the user to rate a workshop item up or down.
				Triggers [code]set_user_item_vote[/code] callback.
			</description>
		</method>
		<method name="setVRHeadsetStreamingEnabled">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
				Set whether the HMD content will be streamed via Steam In-Home Streaming.
			</description>
		</method>
		<method name="showBindingPanel">
			<return type="bool">
			</return>
			<argument index="0" name="controllerHandle" type="int">
			</argument>
			<description>
				Invokes the Steam overlay and brings up the binding screen.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="showGamepadTextInput">
			<return type="bool">
			</return>
			<argument index="0" name="inputMode" type="int">
			</argument>
			<argument index="1" name="lineInputMode" type="int">
			</argument>
			<argument index="2" name="description" type="String">
			</argument>
			<argument index="3" name="maxText" type="int">
			</argument>
			<argument index="4" name="presetText" type="String">
			</argument>
			<description>
				Activates the Big Picture text input dialog which only supports gamepad input.
				Returns [code]true[/code] or [code]false[/code] if activated correctly.
			</description>
		</method>
		<method name="shutdown">
			<return type="bool">
			</return>
			<description>
				Stop SteamControllers interface.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="startItemUpdate">
			<return type="int">
			</return>
			<argument index="0" name="appID" type="int">
			</argument>
			<argument index="1" name="publishedFileID" type="int">
			</argument>
			<description>
				Starts the item update process.
			</description>
		</method>
		<method name="startPlaytimeTracking">
			<return type="void">
			</return>
			<argument index="0" name="publishedFileIDs" type="Array">
			</argument>
			<description>
				Start tracking playtime on a set of workshop items.
				Triggers [code]start_playtime_tracking[/code] callback.
			</description>
		</method>
		<method name="startVRDashboard">
			<return type="void">
			</return>
			<description>
				Ask SteamUI to create and render its OpenVR dashboard.
			</description>
		</method>
		<method name="steamInit">
			<return type="Dictionary">
			</return>
			<description>
				Starts up the Steam API.
				Returns a [Dictionary] containing an int "status" key and a [STRING] "verbal" key with a verbose message about the status.
				This will also return a lot of information about connecting to Steam, mostly useless.
			</description>
		</method>
		<method name="stopPlaytimeTracking">
			<return type="void">
			</return>
			<argument index="0" name="publishedFileIDs" type="Array">
			</argument>
			<description>
				Stop tracking playtime on a set of workshop items.
				Triggers [code]stop_playtime_tracking[/code] callback.
			</description>
		</method>
		<method name="stopPlaytimeTrackingForAllItems">
			<return type="void">
			</return>
			<description>
				Stop tracking playtime of all workshop items.
				triggers [code]stop_playtime_tracking[/code] callback.
			</description>
		</method>
		<method name="storeStats">
			<return type="bool">
			</return>
			<description>
				Store all statistics, and achievements, on Steam servers; must be called to "pop" achievements.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="submitItemUpdate">
			<return type="void">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="changeNote" type="String">
			</argument>
			<description>
				Uploads the changes made to an item to the Steam Workshop; to be called after setting your changes.
				Triggers [code]item_updated[/code] callback.
			</description>
		</method>
		<method name="subscribeItem">
			<return type="void">
			</return>
			<argument index="0" name="publishedFileID" type="int">
			</argument>
			<description>
				Subscribe to a workshop item. It will be downloaded and installed as soon as possible.
				Triggers [code]subscribe_item[/code] callback.
			</description>
		</method>
		<method name="suspendDownloads">
			<return type="void">
			</return>
			<argument index="0" name="suspend" type="bool">
			</argument>
			<description>
				SuspendDownloads( [code]true[/code] ) will suspend all workshop downloads until SuspendDownloads( [code]false[/code] ) is called or the game ends.
			</description>
		</method>
		<method name="triggerScreenshot">
			<return type="void">
			</return>
			<description>
				Causes the Steam overlay to take a screenshot.
			</description>
		</method>
		<method name="triggerVibration">
			<return type="void">
			</return>
			<argument index="0" name="controllerHandle" type="int">
			</argument>
			<argument index="1" name="leftSpeed" type="int">
			</argument>
			<argument index="2" name="rightSpeed" type="int">
			</argument>
			<description>
				Trigger a vibration event on supported controllers.
			</description>
		</method>
		<method name="uninstallDLC">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Uninstall control for optional DLC.
			</description>
		</method>
		<method name="unsubscribeItem">
			<return type="void">
			</return>
			<argument index="0" name="publishedFileID" type="int">
			</argument>
			<description>
				Unsubscribe from a workshop item. This will result in the item being removed after the game quits.
				Triggers [code]unsubscribe_item[/code] callback.
			</description>
		</method>
		<method name="updateAvgRateStat">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="thisSession" type="float">
			</argument>
			<argument index="2" name="sessionLength" type="float">
			</argument>
			<description>
				Updates an AVGRATE stat with new values.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="updateItemPreviewFile">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="index" type="int">
			</argument>
			<argument index="2" name="previewFile" type="String">
			</argument>
			<description>
				Updates an existing additional preview file for the item.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="updateItemPreviewVideo">
			<return type="bool">
			</return>
			<argument index="0" name="updateHandle" type="int">
			</argument>
			<argument index="1" name="index" type="int">
			</argument>
			<argument index="2" name="videoID" type="String">
			</argument>
			<description>
				Updates an additional video preview from YouTube for the item.
				Returns [code]true[/code] or [code]false[/code].
			</description>
		</method>
		<method name="uploadLeaderboardScore">
			<return type="void">
			</return>
			<argument index="0" name="score" type="int">
			</argument>
			<argument index="1" name="keep_best" type="bool" default="true">
			</argument>
			<argument index="2" name="details" type="PoolIntArray" default="[]">
			</argument>
			<description>
				Upload a leaderboard score for the user.
				Triggers [code]leaderboard_score_uploaded[/code] callback.
			</description>
		</method>
		<method name="writeScreenshot">
			<return type="int">
			</return>
			<argument index="0" name="data" type="PoolByteArray">
			</argument>
			<argument index="1" name="width" type="int">
			</argument>
			<argument index="2" name="height" type="int">
			</argument>
			<description>
				Writes a screenshot to the user's Steam screenshot library.
				Should also trigger [code]screenshot_ready[/code] callback.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="_connected_friend_chat_message">
			<description>
				Called when chat message has been received from a friend.
				Emits signal [code]connected_friend_chat_message[/code].
				Sends along the chat message.
			</description>
		</signal>
		<signal name="_subscribe_item">
			<description>
				Called when a player attempts to subscribe to a Workshop item.
				Emits signal [code]subscribe_item[/code].
				Sends along the file ID as an INT and result as an INT.
				Deprecated - Only used with the deprecated RemoteStorage based Workshop API.
			</description>
		</signal>
		<signal name="_unsubscribe_item">
			<description>
				Called when a player attempts to unsubscribe from a Workshop item.
				Emits signal [code]unsubscribe_item[/code].
				Sends along the file ID as an INT and result as an INT.
				Deprecated - Only used with the deprecated RemoteStorage based Workshop API.
			</description>
		</signal>
		<signal name="add_app_dependency_result">
			<description>
				The result of a call to AddAppDependency.
				Emits signal [code]add_app_dependency_result[/code].
				Sends along the result as an INT, the file ID as an INT, and the app ID as an INT.
			</description>
		</signal>
		<signal name="add_ugc_dependency_result">
			<description>
				The result of a call to AddDependency.
				Emits signal [code]add_ugc_dependency_result[/code].
				Sends along the result as an INT, the file ID as an INT, and the child ID as an INT.
			</description>
		</signal>
		<signal name="avatar_loaded">
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="size" type="int">
			</argument>
			<description>
				Called when a large avatar is loaded if you have tried requesting it when it was unavailable.
				Emits signal [code]avatar_loaded[/code] in response to function [code]getFriendAvatar[/code].
				Sends along the Steam ID associated with the avatar, the avatar size, and data buffer ot be turned into an image.
			</description>
		</signal>
		<signal name="change_server_requested">
			<description>
				This callback is made when joining a game. If the user is attempting to join a lobby, then the callback GameLobbyJoinRequested_t will be made.
				Emits signal [code]change_server_requested[/code].
				Sends along the server name and password.
			</description>
		</signal>
		<signal name="check_file_signature">
			<description>
				CallResult for checkFileSignature.
				Emits signal [code]check_file_signature[/code].
				Sends along the signature result.
			</description>
		</signal>
		<signal name="clan_activity_downloaded">
			<description>
				Called when a Steam group activity has received.
				Emits signal [code]clan_activity_downloaded[/code] in response to function [code]downloadClanActivityCounts[/code].
				Sends along the activity as a [Dictionary].
			</description>
		</signal>
		<signal name="client_game_server_deny">
			<description>
				Sent by the Steam server to the client telling it to disconnect from the specified game server, which it may be in the process of or already connected to. The game client should immediately disconnect upon receiving this message. This can usually occur if the user doesn't have rights to play on the game server.
					Emits signal [code]client_game_server_deny[/code].
				Sends along the app ID, the IP address, the server port, secure (?), and the reason as an INT.
			</description>
		</signal>
		<signal name="connected_chat_join">
			<description>
				Called when a user has joined a Steam group chat that the we are in.
				Emits signal [code]connected_chat_join[/code].
				Sends along the chat ID and the user's Steam ID.
			</description>
		</signal>
		<signal name="connected_chat_leave">
			<description>
				Called when a user has left a Steam group chat that the we are in.
				Emits signal [code]connected_chat_leave[/code].
				Sends along the chat ID, the user's Steam ID, if they were kicked, and if they were dropped.
			</description>
		</signal>
		<signal name="connected_clan_chat_message">
			<description>
				Called when a chat message has been received in a Steam group chat that we are in.
				Emits signal [code]connected_clan_chat_message[/code].
				Sends along the chat message.
			</description>
		</signal>
		<signal name="dlc_installed">
			<argument index="0" name="app" type="int">
			</argument>
			<description>
				Triggered after the current user gains ownership of DLC and that DLC is installed.
				Emits signal [code]dlc_installed[/code] in response to function [code]installDLC[/code].
				Sends along the app ID.
			</description>
		</signal>
		<signal name="encrypted_app_ticket_response">
			<description>
				Called when an encrypted application ticket has been received.
				Emits signal [code]encrypted_app_ticket_response[/code].
				Sends along the result.
			</description>
		</signal>
		<signal name="enumerate_following_list">
			<description>
				Returns the result of [code]enumerateFollowingList[/code].
				Emits signal [code]enumerate_following_list[/code] in response to function [code][/code].
				Sends along the message and list as an [Array].
			</description>
		</signal>
		<signal name="favorites_list_accounts_updated">
			<description>
				Called when an account on your favorites list is updated.
				Emits signal [code]favorites_list_accounts_updated[/code].
				Sends along the result.
			</description>
		</signal>
		<signal name="favorites_list_changed">
			<description>
				A server was added/removed from the favorites list, you should refresh now.
				Emits signal [code]favorites_list_changed[/code].
				Sends along a [Dictionary] containing the new IP, new query port, new connection port, app ID, any new flags, add (?), and account ID.
			</description>
		</signal>
		<signal name="file_details_result">
			<argument index="0" name="result" type="int">
			</argument>
			<argument index="1" name="fileSize" type="int">
			</argument>
			<argument index="2" name="fileHash" type="int">
			</argument>
			<argument index="3" name="flags" type="int">
			</argument>
			<description>
				Called after requesting the details of a specific file.
				Emits signal [code]file_details_result[/code] in response to function [code]getFileDetails[/code].
				Sends along the result as an INT, the file size, the file hash, and related flags.
			</description>
		</signal>
		<signal name="friend_rich_presence_update">
			<description>
				Called when rich presence data has been updated for a user, this can happen automatically when friends in the same game update their rich presence, or after a call to [code]requestFriendRichPresence[/code].
				Emits signal [code]friend_rich_presence_update[/code].
				Sends along their Steam ID and the app's ID.
			</description>
		</signal>
		<signal name="game_web_callback">
			<description>
				Sent to your game in response to a steam://gamewebcallback/ command from a user clicking a link in the Steam overlay browser. You can use this to add support for external site signups where you want to pop back into the browser after some web page signup sequence, and optionally get back some detail about that.
				Emits signal [code]game_web_callback[/code].
				Sends along the URL.
			</description>
		</signal>
		<signal name="gamepad_text_input_dismissed">
			<description>
				Called when the big picture gamepad text input has been closed.
				Emits signal [code]gamepad_text_input_dismissed[/code].
				Sends along the text from input and the length.
			</description>
		</signal>
		<signal name="get_app_dependencies_result">
			<description>
				Called when getting the app dependencies for an item.
				Emits signal [code]get_app_dependencies_result[/code].
				Sends along the result as an INT, the file ID as an INT, the number of app dependencies as an INT, and the total number of app depedencies as an INT. Unclear how the last two are different.
			</description>
		</signal>
		<signal name="get_auth_session_ticket_response">
			<argument index="0" name="ticket" type="int">
			</argument>
			<argument index="1" name="result" type="int">
			</argument>
			<description>
				Result when creating an auth session ticket.
				Emits signal [code]get_auth_session_ticket_response[/code] in response to function [code]getAuthSessionTicket[/code].
				Sends along the auth ID and the result as an INT.
			</description>
		</signal>
		<signal name="get_follower_count">
			<description>
				Returns the result of [code]getFollowerCount[/code].
				Emits signal [code]get_follower_count[/code].
				Sends along the result as an INT, the user's Steam ID, and the count.
			</description>
		</signal>
		<signal name="get_item_vote_result">
			<description>
				Called when getting the users vote status on an item.
				Emits signal [code]get_item_vote_result[/code].
				Sends along the result as an INT, the file ID as an INT, voted up as a BOOL, voted down as a BOOL, and vote skipped as a BOOL.
			</description>
		</signal>
		<signal name="global_achievement_percentages_ready">
			<argument index="0" name="gameID" type="int">
			</argument>
			<argument index="1" name="result" type="int">
			</argument>
			<description>
				Called when the global achievement percentages have been received from the server.
				Emits signal [code]global_achievement_percentages_ready[/code] in response to function [code]requestGlobalAchievementPercentages[/code].
				Sends along the game ID and result as an INT.
			</description>
		</signal>
		<signal name="global_stats_received">
			<description>
				Called when the global stats have been received from the server.
				Emits signal [code]global_stats_received[/code].
				Sends along the game ID and the result.
			</description>
		</signal>
		<signal name="ip_country">
			<description>
				Called when the country of the user changed. The country should be updated with getIPCountry.
				Emits signal [code]ip_country[/code].
				Does not send any data.
			</description>
		</signal>
		<signal name="ipc_failure">
			<description>
				Called when the callback system for this client is in an error state (and has flushed pending callbacks). When getting this message the client should disconnect from Steam, reset any stored Steam state and reconnect. This usually occurs in the rare event the Steam client has some kind of fatal error.
				Emits signal [code]ipc_failure[/code].
				Sends along the type as an INT.
			</description>
		</signal>
		<signal name="is_following">
			<description>
				Returns the result of [code]isFollowing[/code].
				Emits signal [code]is_following[/code].
				Sends along the result as an INT, the user's Steam ID, and if they are following.
			</description>
		</signal>
		<signal name="item_created">
			<description>
				Called when a new workshop item has been created.
				Emits signal [code]item_created[/code] in response to function [code]createItem[/code].
				Sends along the result as an INT, the file ID, and if the TOS is accepted.
			</description>
		</signal>
		<signal name="item_deleted">
			<description>
				Called when an attempt at deleting an item completes.
				Emits signal [code]item_deleted[/code].
				Sends along the result as an INT and the file ID as an INT
			</description>
		</signal>
		<signal name="item_downloaded">
			<description>
				Called when a workshop item has been downloaded.
				Emits signal [code]item_downloaded[/code].
				Sends along the result as an INT, the file ID as an INT, and the app ID as an INT.
			</description>
		</signal>
		<signal name="item_installed">
			<description>
				Called when a workshop item has been installed or updated.
				Emits signal [code]item_installed[/code].
				Sends along the app ID and file ID.
			</description>
		</signal>
		<signal name="item_updated">
			<description>
				Called when an item update has completed.
				Emits signal [code]item_updated[/code] in response to function [code]submitItemUpdate[/code].
				Sends along the result as an INT and if the TOS is accepted.
			</description>
		</signal>
		<signal name="join_clan_chat_complete">
			<description>
				Posted when the user has attempted to join a Steam group chat via [code]joinClanChatRoom[/code].
				Emits signal [code]join_clan_chat_complete[/code].
				Sends along the chat ID and response as an INT.
			</description>
		</signal>
		<signal name="join_game_requested">
			<description>
				Called when the user tries to join a game from their friends list or after a user accepts an invite by a friend with [code]inviteUserToGame[/code].
				Emits signal [code]join_game_requested[/code] in response to receiving a Steam invite.
				Send along the requesting user's Steam ID and a connection string from Rich Presense. Generally that is set when the game or lobby is created.
			</description>
		</signal>
		<signal name="join_requested">
			<argument index="0" name="from" type="int">
			</argument>
			<argument index="1" name="connect_string" type="String">
			</argument>
			<description>
				Called when the user tries to join a lobby from their friends list or after a user accepts an invite by a friend with [code]inviteUserToGame[/code].
				Emits signal [code]join_requested[/code] in response to receiving a Steam invite.
				Sends along requesting user's Steam ID and the lobby ID.
			</description>
		</signal>
		<signal name="leaderboard_find_result">
			<argument index="0" name="leaderboard" type="int">
			</argument>
			<argument index="1" name="found" type="int">
			</argument>
			<description>
				Result when finding a leaderboard.
				Emits signal [code]leaderboard_find_result[/code] in response to function [code]findLeaderboard[/code].
				Sends along the leaderboard handle and if it was found.
			</description>
		</signal>
		<signal name="leaderboard_score_uploaded">
			<argument index="0" name="success" type="bool">
			</argument>
			<argument index="1" name="score" type="int">
			</argument>
			<argument index="2" name="score_changed" type="bool">
			</argument>
			<argument index="3" name="global_rank_new" type="int">
			</argument>
			<argument index="4" name="global_rank_previous" type="int">
			</argument>
			<description>
				Result indicating that a leaderboard score has been uploaded.
				Emits signal [code]leaderboard_score_uploaded[/code] in response to function [code]uploadLeaderboardScore[/code].
				Sends along the success, the score, the scored changed, the new global rank, and the previous global rank.
			</description>
		</signal>
		<signal name="leaderboard_scores_downloaded">
			<description>
				Called when scores for a leaderboard have been downloaded and are ready to be retrieved.
				Emits signal [code]leaderboard_scores_downloaded[/code] in response to function [code]downloadLeaderboardEntries[/code].
				Sends along the leaderboards as an [Array].
			</description>
		</signal>
		<signal name="leaderboard_ugc_set">
			<description>
				Result indicating that user generated content has been attached to one of the current user's leaderboard entries.
				Emits signal [code]leaderboard_ugc_set[/code].
				Sends along the leaderboard handle and the result.
			</description>
		</signal>
		<signal name="licenses_updated">
			<description>
				Called whenever the users licenses (owned packages) changes.
				Emits signal [code]licenses_updated[/code].
				Does not send any data.
			</description>
		</signal>
		<signal name="lobby_chat_update">
			<description>
				A lobby chat room state has changed, this is usually sent when a user has joined or left the lobby.
				Emit signal [code]lobby_chat_update[/code].
				Sends along the lobby ID, the Steam ID of the user who changed, the Steam ID of the user who is making the change, and the chat state.
			</description>
		</signal>
		<signal name="lobby_created">
			<description>
				Result of our request to create a Lobby. At this point, the lobby has been joined and is ready for use.
				Emits signal [code]lobby_created[/code] in response to function [code]createLobby[/code].
				Sends along the connect status as an INT and the lobby ID.
			</description>
		</signal>
		<signal name="lobby_data_update">
			<description>
				The lobby metadata has changed.
				Emits signals [code]lobby_data_update[/code].
				Sends along the success as a BOOL, the lobby ID, the member's Steam ID, and the key.
			</description>
		</signal>
		<signal name="lobby_game_created">
			<description>
				A game server has been set via [code]setLobbyGameServer[/code] for all of the members of the lobby to join. It's up to the individual clients to take action on this; the typical game behavior is to leave the lobby and connect to the specified game server; but the lobby may stay open throughout the session if desired.
				Emits signal [code]lobby_game_created[/code].
				Sends along the lobby ID, the server ID, the server's IP, and the server's port.
			</description>
		</signal>
		<signal name="lobby_invite">
			<argument index="0" name="inviter" type="int">
			</argument>
			<argument index="1" name="lobby" type="int">
			</argument>
			<argument index="2" name="game" type="int">
			</argument>
			<description>
				Someone has invited you to join a Lobby. Normally you don't need to do anything with this, as the Steam UI will also display a 'user has invited you to the lobby, join?' notification and message.
				Emits signal [code]lobby_invite[/code] in response to sending a Steam invite.
				Sends along inviter's Steam ID, the lobby ID, and the game ID.
			</description>
		</signal>
		<signal name="lobby_joined">
			<argument index="0" name="lobby" type="int">
			</argument>
			<argument index="1" name="permissions" type="int">
			</argument>
			<argument index="2" name="locked" type="bool">
			</argument>
			<argument index="3" name="response" type="int">
			</argument>
			<description>
				Recieved upon attempting to enter a lobby. Lobby metadata is available to use immediately after receiving this.
				Emits signal [code]lobby_joined[/code].
				Sends along lobby ID, permssions, if locked or not, and the response as an INT.
			</description>
		</signal>
		<signal name="lobby_match_list">
			<description>
				Result when requesting the lobby list.
				Emits signal [code]lobby_match_list[/code] in response to function [code]requestLobbyList[/code].
				Sends along an [Array] of lobbies.
			</description>
		</signal>
		<signal name="lobby_message">
			<description>
				A chat (text or binary) message for this lobby has been received.
				Emits signal [code]lobby_Message[/code] in response to an incoming message.
				Sends along the result, user sending the message, the message itself, and the type.
			</description>
			</description>
		</signal>
		<signal name="low_power">
			<argument index="0" name="power" type="int">
			</argument>
			<description>
				Called when running on a laptop and less than 10 minutes of battery is left, and then fires then every minute afterwards.
				Emits signal [code]low_power[/code].
				Sends along the power as an INT.
			</description>
		</signal>
		<signal name="microstransaction_auth_response">
			<description>
				Called when a user has responded to a microtransaction authorization request.
				Emits signal [code]microtransaction_auth_response[/code].
				Sends along the app ID, the order ID, and if it was authorized.
			</description>
		</signal>
		<signal name="name_changed">
			<description>
				Reports the result of an attempt to change the current user's persona name.
				Emits signal [code]name_changed[/code] in response to function [code]setPersonaName[/code].
				Sends along the remote success as a BOOL, local success as a BOOL, and result as an INT.
			</description>
		</signal>
		<signal name="new_launch_url_parameters">
			<description>
				Triggered after the user executes a steam url with command line or query parameters such as [code]steam://run/(appid)//?param1=value1;param2=value2;param3=value3;[/code] while the game is already running. The new params can be queried with getLaunchCommandLine and getLaunchQueryParam.
				Emits signal [code]new_launch_url_parameters[/code].
				Does not send any data.
			</description>
		</signal>
		<signal name="number_of_current_players">
			<argument index="0" name="success" type="bool">
			</argument>
			<argument index="1" name="players" type="int">
			</argument>
			<description>
				Gets the current number of players for the current app ID.
				Emits signal [code]number_of_current_players[/code] in response to function [code]getNumberOfCurrentPlayers[/code].
				Sends along the success and player numbers.
			</description>
		</signal>
		<signal name="overlay_toggled">
			<argument index="0" name="active" type="bool">
			</argument>
			<description>
				Posted when the Steam Overlay activates or deactivates. The game can use this to be pause or resume single player games.
				Emits signal [code]overlay_toggled[/code].
				Sends along true or false.
			</description>
		</signal>
		<signal name="p2p_session_connect_fail">
			<description>
				Called when a user sends a packet and it fails.
				Emits signal [code]p2p_session_connect_fail[/code].
				Sends along the user's Steam ID and the failure reason.
			</description>
		</signal>
		<signal name="p2p_session_request">
			<description>
				Called when a user sends a packet.
				Emits signal [code]p2p_session_request[/code].
				Sends along the user's Steam ID.
			</description>
		</signal>
		<signal name="persona_state_change">
			<description>
				This is called when a user has some kind of change.
				Emits signal [code]persona_state_change[/code].
				Sends along the Steam ID of the user changed and related flags.
			</description>
		</signal>
		<signal name="remote_play_session_connected">
			<description>
				Called when a player connects to a remote play session.
				Emits signal [code]remote_play_session_connected[/code].
				Sends along the connecting player's session ID.
			</description>
		</signal>
		<signal name="remote_play_session_disconnected">
			<description>
				Called when a player disconnects from a remote play session.
				Emits signal [code]remote_play_session_disconnected[/code].
				Sends along the disconnecting player's session ID.
			</description>
		</signal>
		<signal name="remove_app_dependency_result">
			<description>
				Purpose: The result of a call to RemoveAppDependency.
				Emits signal [code]remove_app_dependency_result[/code].
				Sends along the result as an INT, the file ID as an INT, and the app ID as an INT.
			</description>
		</signal>
		<signal name="remove_ugc_dependency_result">
			<description>
				Purpose: The result of a call to RemoveDependency.
				Emits signal [code]remove_ugc_dependency_result[/code].
				Sends along the result as an INT, the file ID as an INT, and the child ID as an INT.
			</description>
		</signal>
		<signal name="request_clan_officer_list">
			<description>
				Marks the return of a request officer list call.
				Emits signal [code]request_clan_officer_list[/code] in response to function [code]requestClanOfficerList[/code].
				Sends along the message and list as an [Array].
			</description>
		</signal>
		<signal name="screenshot_ready">
			<argument index="0" name="screenshot_handle" type="int">
			</argument>
			<argument index="1" name="result" type="int">
			</argument>
			<description>
				A screenshot successfully written or otherwise added to the library and can now be tagged.
				Emits signal [code]screenshot_ready[/code] in response to function [code]writeScreenshot[/code], [code]addScreenshotToLibrary[/code], or [code]triggerScreenshot[/code].
				Sends along the handle and result as an INT.
			</description>
		</signal>
		<signal name="screenshot_requested">
			<description>
				A screenshot has been requested by the user from the Steam screenshot hotkey. This will only be called if hookScreenshots has been enabled, in which case Steam will not take the screenshot itself.
				Emits signal [code]screenshot_requested[/code].
				Does not send any data.
			</description>
		</signal>
		<signal name="set_user_item_vote">
			<description>
				Called when the user has voted on an item.
				Emits signal [code]set_user_item_vote[/code].
				Sends along the result as an INT, the file ID as an INT, and voted up as a BOOL.
			</description>
		</signal>
		<signal name="start_playtime_tracking">
			<description>
				Called when workshop item playtime tracking has started.
				Emits signal [code]start_playtime_tracking[/code].
				Sends along the result as an INT.
			</description>
		</signal>
		<signal name="steam_api_call_completed">
			<description>
				Called when a SteamAPICall_t has completed (or failed)
				Emits signal [code]steam_api_call_completed[/code].
				Sends along the async call, the callback as an INT, and the parametere as an INT.
			</description>
		</signal>
		<signal name="steam_server_connect_failed">
			<description>
				Called when a connection attempt has failed. This will occur periodically if the Steam client is not connected, and has failed when retrying to establish a connection.
				Emits signal [code]steam_server_connect_failed[/code].
				Sends along the result as an INT and if it is retrying as a BOOL.
			</description>
		</signal>
		<signal name="steam_server_connected">
			<description>
				Called when a connections to the Steam back-end has been established. This means the Steam client now has a working connection to the Steam servers. Usually this will have occurred before the game has launched, and should only be seen if the user has dropped connection due to a networking issue or a Steam server update.
				Emits signal [code]steam_server_connected[/code].
				Does not send any data.
			</description>
		</signal>
		<signal name="steam_server_disconnected">
			<description>
				Called if the client has lost connection to the Steam servers. Real-time services will be disabled until a matching SteamServersConnected_t has been posted.
				Emits signal [code]steam_server_disconnected[/code].
				Does not send any data.
			</description>
		</signal>
		<signal name="steam_shutdown">
			<description>
				Called when Steam wants to shutdown.
				Emits signal [code]steam_shutdown[/code].
				Does not send any data.
			</description>
		</signal>
		<signal name="stop_playtime_tracking">
			<description>
				Called when workshop item playtime tracking has stopped.
				Emits signal [code]stop_playtime_tracking[/code].
				Sends along the result as an INT.
			</description>
		</signal>
		<signal name="store_auth_url_response">
			<description>
				Response when we have recieved the authentication URL after a call to requestStoreAuthURL.
				Emits signal [code]store_auth_url_response[/code].
				Sends along the URL.
			</description>
		</signal>
		<signal name="ugc_query_completed">
			<description>
				Called when a UGC query request completes.
				Emits signal [code]ugc_query_completed[/code].
				Sends along the result as an INT, the item handle as an INT, the number of results returned as an INT, the number of total matching results as an INT, and if the query results are cached as a BOOL.
			</description>
		</signal>
		<signal name="user_achievement_icon_fetched">
			<argument index="0" name="gameID" type="int">
			</argument>
			<argument index="1" name="achievementName" type="String">
			</argument>
			<argument index="2" name="achieved" type="bool">
			</argument>
			<argument index="3" name="iconHandle" type="int">
			</argument>
			<description>
				Result of an achievement icon that has been fetched.
				Emits signal [code]user_achievement_icon_fetched[/code] in response to function [code]getAchievementIcon[/code].
				Sends along the gameID, the achievement name, achieved, iconHandle.
			</description>
		</signal>
		<signal name="user_achievement_stored">
			<description>
				Result of a request to store the achievements on the server, or an "indicate progress" call. If both current progress and max progress are zero, that means the achievement has been fully unlocked.
				Emits signal [code]user_achievement_stored[/code] in response to function [code]setAchievement[/code].
				Sends along the game ID, the achievement group, the name, the current progress and the maximum progress.
			</description>
		</signal>
		<signal name="user_favorite_items_list_changed">
			<description>
				Called when the user has added or removed an item to/from their favorites.
				Emits signal [code]user_favorite_items_list_changed[/code].
				Sends along the result as an INT, the file ID as an INT, and was this an add request as a BOOL.
			</description>
		</signal>
		<signal name="user_stats_received">
			<argument index="0" name="gameID" type="int">
			</argument>
			<argument index="1" name="result" type="int">
			</argument>
			<argument index="2" name="userID" type="int">
			</argument>
			<description>
				Called when the latest stats and achievements for a specific user (including the local user) have been received from the server.
				Emits signal [code]user_stats_received[/code] in response to function [code]requestCurrentStats[/code] or [code]requestUserStats[/code].
				Sends along the game ID, the result as an INT, and the user's Steam ID.
			</description>
		</signal>
		<signal name="user_stats_stored">
			<description>
				Result of a request to store the user stats.
				Emits signal [code]user_stats_stored[/code] in response to function [code]storeStats[/code] or [code]indicateAchievementProgress[/code].
				Sends along the game ID and result as an INT.
			</description>
		</signal>
		<signal name="user_stats_unloaded">
			<description>
				Callback indicating that a user's stats have been unloaded. Call RequestUserStats again before accessing stats for this user.
				Emits signal [code]user_stats_unloaded[/code].
				Sends along the user's Steam ID.
			</description>
		</signal>
		<signal name="validate_auth_ticket_response">
			<argument index="0" name="steamID" type="int">
			</argument>
			<argument index="1" name="auth_session_reponse" type="int">
			</argument>
			<argument index="2" name="owner_steamID" type="int">
			</argument>
			<description>
				Called when an auth ticket has been validated.
				Emits signal [code]validate_auth_ticket_response[/code] in response to function [code]beginAuthSession[/code].
				Sends along the auth ID, the response as an INT, and the owner's Steam ID.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="OFFLINE" value="0">
		</constant>
		<constant name="ONLINE" value="1">
		</constant>
		<constant name="BUSY" value="2">
		</constant>
		<constant name="AWAY" value="3">
		</constant>
		<constant name="SNOOZE" value="4">
		</constant>
		<constant name="LF_TRADE" value="5">
		</constant>
		<constant name="LF_PLAY" value="6">
		</constant>
		<constant name="NOT_OFFLINE" value="8">
		</constant>
		<constant name="ALL" value="9">
		</constant>
		<constant name="FLAG_NONE" value="0">
		</constant>
		<constant name="FLAG_BLOCKED" value="1">
		</constant>
		<constant name="FLAG_FRIENDSHIP_REQUESTED" value="2">
		</constant>
		<constant name="FLAG_IMMEDIATE" value="4">
		</constant>
		<constant name="FLAG_CLAN_MEMBER" value="8">
		</constant>
		<constant name="FLAG_ON_GAME_SERVER" value="16">
		</constant>
		<constant name="FLAG_REQUESTING_FRIENDSHIP" value="128">
		</constant>
		<constant name="FLAG_REQUESTING_INFO" value="256">
		</constant>
		<constant name="FLAG_IGNORED" value="512">
		</constant>
		<constant name="FLAG_IGNORED_FRIEND" value="1024">
		</constant>
		<constant name="FLAG_CHAT_MEMBER" value="4096">
		</constant>
		<constant name="FLAG_ALL" value="65535">
		</constant>
		<constant name="RELATION_NONE" value="0">
		</constant>
		<constant name="RELATION_BLOCKED" value="1">
		</constant>
		<constant name="RELATION_REQUEST_RECIPIENT" value="2">
		</constant>
		<constant name="RELATION_FRIEND" value="3">
		</constant>
		<constant name="RELATION_REQUEST_INITIATOR" value="4">
		</constant>
		<constant name="RELATION_IGNORED" value="5">
		</constant>
		<constant name="RELATION_IGNORED_FRIEND" value="6">
		</constant>
		<constant name="RELATION_SUGGESTED" value="7">
		</constant>
		<constant name="RELATION_MAX" value="8">
		</constant>
		<constant name="OK" value="0">
		</constant>
		<constant name="FAILED" value="1">
		</constant>
		<constant name="ERR_NO_CLIENT" value="2">
		</constant>
		<constant name="ERR_NO_CONNECTION" value="3">
		</constant>
		<constant name="AUTH_SESSION_OK" value="0">
		</constant>
		<constant name="AUTH_SESSION_STEAM_NOT_CONNECTED" value="1">
		</constant>
		<constant name="AUTH_SESSION_NO_LICENSE" value="2">
		</constant>
		<constant name="AUTH_SESSION_VAC_BANNED" value="3">
		</constant>
		<constant name="AUTH_SESSION_LOGGED_IN_ELSEWHERE" value="4">
		</constant>
		<constant name="AUTH_SESSION_VAC_CHECK_TIMEOUT" value="5">
		</constant>
		<constant name="AUTH_SESSION_TICKET_CANCELED" value="6">
		</constant>
		<constant name="AUTH_SESSION_TICKET_ALREADY_USED" value="7">
		</constant>
		<constant name="AUTH_SESSION_TICKET_INVALID" value="8">
		</constant>
		<constant name="AUTH_SESSION_PUBLISHER_BANNED" value="9">
		</constant>
		<constant name="AVATAR_SMALL" value="0">
		</constant>
		<constant name="AVATAR_MEDIUM" value="1">
		</constant>
		<constant name="AVATAR_LARGE" value="2">
		</constant>
		<constant name="TOP_LEFT" value="0">
		</constant>
		<constant name="TOP_RIGHT" value="1">
		</constant>
		<constant name="BOT_LEFT" value="2">
		</constant>
		<constant name="BOT_RIGHT" value="3">
		</constant>
		<constant name="GLOBAL" value="0">
		</constant>
		<constant name="GLOBAL_AROUND_USER" value="1">
		</constant>
		<constant name="FRIENDS" value="2">
		</constant>
		<constant name="USERS" value="3">
		</constant>
		<constant name="PERSONA_NAME_MAX_UTF16" value="128">
		</constant>
		<constant name="PERSONA_NAME_MAX_UTF8" value="128">
		</constant>
		<constant name="RESTRICTION_NONE" value="0">
		</constant>
		<constant name="RESTRICTION_UNKNOWN" value="1">
		</constant>
		<constant name="RESTRICTION_ANY_CHAT" value="2">
		</constant>
		<constant name="RESTRICTION_VOICE_CHAT" value="4">
		</constant>
		<constant name="RESTRICTION_GROUP_CHAT" value="8">
		</constant>
		<constant name="RESTRICTION_RATING" value="16">
		</constant>
		<constant name="RESTRICTION_GAME_INVITES" value="32">
		</constant>
		<constant name="RESTRICTION_TRADING" value="64">
		</constant>
		<constant name="CHAT_METADATA_MAX" value="8192">
		</constant>
		<constant name="CHAT_INVALID" value="0">
		</constant>
		<constant name="CHAT_MESSAGE" value="1">
		</constant>
		<constant name="CHAT_TYPING" value="2">
		</constant>
		<constant name="CHAT_INVITE_GAME" value="3">
		</constant>
		<constant name="CHAT_EMOTE" value="4">
		</constant>
		<constant name="CHAT_LEFT" value="6">
		</constant>
		<constant name="CHAT_ENTERED" value="7">
		</constant>
		<constant name="CHAT_KICKED" value="8">
		</constant>
		<constant name="CHAT_BANNED" value="9">
		</constant>
		<constant name="CHAT_DISCONNECTED" value="10">
		</constant>
		<constant name="CHAT_HISTORICAL" value="11">
		</constant>
		<constant name="CHAT_LINK_BLOCKED" value="14">
		</constant>
		<constant name="MAX_RICH_PRESENCE_KEYS" value="20">
		</constant>
		<constant name="MAX_RICH_PRESENCE_KEY_LENGTH" value="64">
		</constant>
		<constant name="MAX_RICH_PRESENCE_VALUE_LENGTH" value="256">
		</constant>
		<constant name="OVERLAY_TO_STORE_FLAG_NONE" value="0">
		</constant>
		<constant name="OVERLAY_TO_STORE_FLAG_ADD_TO_CART" value="1">
		</constant>
		<constant name="OVERLAY_TO_STORE_FLAG_ADD_TO_CART_AND_SHOW" value="2">
		</constant>
		<constant name="PRIVATE" value="0">
		</constant>
		<constant name="FRIENDS_ONLY" value="1">
		</constant>
		<constant name="PUBLIC" value="2">
		</constant>
		<constant name="INVISIBLE" value="3">
		</constant>
		<constant name="LOBBY_KEY_LENGTH" value="255">
		</constant>
		<constant name="LOBBY_EQUAL_LESS_THAN" value="-2">
		</constant>
		<constant name="LOBBY_LESS_THAN" value="-1">
		</constant>
		<constant name="LOBBY_EQUAL" value="0">
		</constant>
		<constant name="LOBBY_GREATER_THAN" value="1">
		</constant>
		<constant name="LOBBY_EQUAL_GREATER_THAN" value="2">
		</constant>
		<constant name="LOBBY_NOT_EQUAL" value="3">
		</constant>
		<constant name="LOBBY_DISTANCE_CLOSE" value="0">
		</constant>
		<constant name="LOBBY_DISTANCE_DEFAULT" value="1">
		</constant>
		<constant name="LOBBY_DISTANCE_FAR" value="2">
		</constant>
		<constant name="LOBBY_DISTANCE_WORLDWIDE" value="3">
		</constant>
		<constant name="LOBBY_OK" value="0">
		</constant>
		<constant name="LOBBY_NO_CONNECTION" value="1">
		</constant>
		<constant name="LOBBY_TIMEOUT" value="2">
		</constant>
		<constant name="LOBBY_FAIL" value="3">
		</constant>
		<constant name="LOBBY_ACCESS_DENIED" value="4">
		</constant>
		<constant name="LOBBY_LIMIT_EXCEEDED" value="5">
		</constant>
		<constant name="REMOTE_STORAGE_PLATFORM_NONE" value="0">
		</constant>
		<constant name="REMOTE_STORAGE_PLATFORM_WINDOWS" value="1">
		</constant>
		<constant name="REMOTE_STORAGE_PLATFORM_OSX" value="2">
		</constant>
		<constant name="REMOTE_STORAGE_PLATFORM_PS3" value="4">
		</constant>
		<constant name="REMOTE_STORAGE_PLATFORM_LINUX" value="8">
		</constant>
		<constant name="REMOTE_STORAGE_PLATFORM_RESERVED2" value="16">
		</constant>
		<constant name="REMOTE_STORAGE_PLATFORM_ALL" value="-1">
		</constant>
		<constant name="UGC_PREVIEW_TYPE_IMAGE" value="0">
		</constant>
		<constant name="UGC_PREVIEW_TYPE_YOUTUBE" value="1">
		</constant>
		<constant name="UGC_PREVIEW_TYPE_SKETCHFAB" value="2">
		</constant>
		<constant name="UGC_PREVIEW_TYPE_ENVIRONMENT_MAP_HORIZONTALCROSS" value="3">
		</constant>
		<constant name="UGC_PREVIEW_TYPE_ENVIRONMENT_MAP_LATLONG" value="4">
		</constant>
		<constant name="UGC_PREVIEW_TYPE_RESERVED_MAX" value="255">
		</constant>
		<constant name="UGC_STATE_NONE" value="0">
		</constant>
		<constant name="UGC_STATE_SUBSCRIBED" value="1">
		</constant>
		<constant name="UGC_STATE_LEGACY" value="2">
		</constant>
		<constant name="UGC_STATE_INSTALLED" value="4">
		</constant>
		<constant name="UGC_STATE_UPDATE" value="8">
		</constant>
		<constant name="UGC_STATE_DOWNLOADING" value="16">
		</constant>
		<constant name="UGC_STATE_PENDING" value="32">
		</constant>
		<constant name="UGC_STATS_SUBSCRIPTIONS" value="0">
		</constant>
		<constant name="UGC_STATS_FAVORITES" value="1">
		</constant>
		<constant name="UGC_STATS_FOLLOWERS" value="2">
		</constant>
		<constant name="UGC_STATS_UNIQUE_SUBSCRIPTIONS" value="3">
		</constant>
		<constant name="UGC_STATS_UNIQUE_FAVORITES" value="4">
		</constant>
		<constant name="UGC_STATS_UNIQUED_FOLLOWERS" value="5">
		</constant>
		<constant name="UGC_STATS_UNIQUE_VIEWS" value="6">
		</constant>
		<constant name="UGC_STATS_SCORE" value="7">
		</constant>
		<constant name="UGC_STATS_SECONDS_PLAYED" value="8">
		</constant>
		<constant name="UGC_STATS_PLAYTIME_SESSIONS" value="9">
		</constant>
		<constant name="UGC_STATS_COMMENTS" value="10">
		</constant>
		<constant name="UGC_STATS_SECONDS_PLAYED_DURING_PERIOD" value="11">
		</constant>
		<constant name="UGC_STATS_PLAYTIME_SESSIONS_DURING_PERIOD" value="12">
		</constant>
		<constant name="UGC_STATUS_INVALID" value="0">
		</constant>
		<constant name="UGC_STATUS_PREPARING_CONFIG" value="1">
		</constant>
		<constant name="UGC_STATUS_PREPARING_CONTENT" value="2">
		</constant>
		<constant name="UGC_STATUS_UPLOADING_CONTENT" value="3">
		</constant>
		<constant name="UGC_STATUS_UPLOADING_PREVIEW" value="4">
		</constant>
		<constant name="UGC_STATUS_COMMITTING_CHANGES" value="5">
		</constant>
		<constant name="UGC_MATCH_ITEMS" value="0">
		</constant>
		<constant name="UGC_MATCH_ITEMS_MTX" value="1">
		</constant>
		<constant name="UGC_MATCH_ITEMS_READYTOUSE" value="2">
		</constant>
		<constant name="UGC_MATCH_COLLECTIONS" value="3">
		</constant>
		<constant name="UGC_MATCH_ARTWORK" value="4">
		</constant>
		<constant name="UGC_MATCH_VIDEOS" value="5">
		</constant>
		<constant name="UGC_MATCH_SCREENSHOTS" value="6">
		</constant>
		<constant name="UGC_MATCH_ALLGUIDES" value="7">
		</constant>
		<constant name="UGC_MATCH_WEBGUIDES" value="8">
		</constant>
		<constant name="UGC_MATCH_INTEGRATEDGUIDES" value="9">
		</constant>
		<constant name="UGC_MATCH_USABLE_INGAME" value="10">
		</constant>
		<constant name="UGC_MATCH_CONTROLLER_BINDINGS" value="11">
		</constant>
		<constant name="UGC_MATCH_GAMEMANAGED_ITEM" value="12">
		</constant>
		<constant name="UGC_MATCH_ALL" value="0">
		</constant>
		<constant name="UGC_QUERY_RANKED_VOTE" value="0">
		</constant>
		<constant name="UGC_QUERY_RANKED_PUBLICATION_DATE" value="1">
		</constant>
		<constant name="UGC_QUERY_RANKED_ACCEPTANCE_DATE" value="2">
		</constant>
		<constant name="UGC_QUERY_RANKED_TREND" value="3">
		</constant>
		<constant name="UGC_QUERY_RANKED_FRIEND_FAVORITE" value="4">
		</constant>
		<constant name="UGC_QUERY_RANKED_FRIEND_CREATED" value="5">
		</constant>
		<constant name="UGC_QUERY_RANKED_TIMES_REPORTED" value="6">
		</constant>
		<constant name="UGC_QUERY_RANKED_FOLLOWED_USERS" value="7">
		</constant>
		<constant name="UGC_QUERY_RANKED_NOT_RATED" value="8">
		</constant>
		<constant name="UGC_QUERY_RANKED_TOTAL_VOTES_ASC" value="9">
		</constant>
		<constant name="UGC_QUERY_RANKED_VOTES_UP" value="10">
		</constant>
		<constant name="UGC_QUERY_RANKED_TEXT_SEARCH" value="11">
		</constant>
		<constant name="UGC_QUERY_RANKED_UNIQUE_SUBSCRIPTIONS" value="12">
		</constant>
		<constant name="UGC_QUERY_RANKED_PLAYTIME_TREND" value="13">
		</constant>
		<constant name="UGC_QUERY_RANKED_TOTAL_PLAYTIME" value="14">
		</constant>
		<constant name="UGC_QUERY_RANKED_AVERAGE_PLAYTIME" value="15">
		</constant>
		<constant name="UGC_QUERY_RANKED_LIFETIME_AVERAGE_PLAYTIME" value="16">
		</constant>
		<constant name="UGC_QUERY_RANKED_PLAYTIME_SESSION" value="17">
		</constant>
		<constant name="UGC_QUERY_RANKED_LIFETIME_PLAYTIME" value="18">
		</constant>
		<constant name="UGC_LIST_PUBLISHED" value="0">
		</constant>
		<constant name="UGC_LIST_VOTED_ON" value="1">
		</constant>
		<constant name="UGC_LIST_VOTED_UP" value="2">
		</constant>
		<constant name="UGC_LIST_VOTED_DOWN" value="3">
		</constant>
		<constant name="UGC_LIST_WILL_VOTE_LATER" value="4">
		</constant>
		<constant name="UGC_LIST_FAVORITED" value="5">
		</constant>
		<constant name="UGC_LIST_SUBSCRIBED" value="6">
		</constant>
		<constant name="UGC_LIST_USED_OR_PLAYED" value="7">
		</constant>
		<constant name="UGC_LIST_FOLLOWED" value="8">
		</constant>
		<constant name="UGC_SORT_ORDER_CREATION_DESC" value="0">
		</constant>
		<constant name="UGC_SORT_ORDER_CREATION_ASC" value="1">
		</constant>
		<constant name="UGC_SORT_ORDER_TITLE_ASC" value="2">
		</constant>
		<constant name="UGC_SORT_ORDER_LAST_UPDATE_DESC" value="3">
		</constant>
		<constant name="UGC_SORT_ORDER_SUBSCRIPTION_DESC" value="4">
		</constant>
		<constant name="UGC_SORT_ORDER_VOTE_SCORE_DESC" value="5">
		</constant>
		<constant name="UGC_SORT_ORDER_FOR_MODERATION" value="6">
		</constant>
		<constant name="UGC_NUM_RESULTS_PER_PAGE" value="50">
		</constant>
		<constant name="UGC_DEVELOPER_METADATA_MAX" value="5000">
		</constant>
		<constant name="UGC_QUERY_HANDLE_INVALID" value="0">
		</constant>
		<constant name="UGC_UPDATE_HANDLE_INVALID" value="0">
		</constant>
		<constant name="UGC_MAX_TITLE_CHARS" value="128">
		</constant>
		<constant name="UGC_MAX_DESC_CHARS" value="5000">
		</constant>
		<constant name="UGC_MAX_METADATA_CHARS" value="5000">
		</constant>
		<constant name="UGC_FILE_VISIBLE_PUBLIC" value="0">
		</constant>
		<constant name="UGC_FILE_VISIBLE_FRIENDS" value="1">
		</constant>
		<constant name="UGC_FILE_VISIBLE_PRIVATE" value="2">
		</constant>
		<constant name="UGC_ITEM_COMMUNITY" value="0">
		</constant>
		<constant name="UGC_ITEM_MICROTRANSACTION" value="1">
		</constant>
		<constant name="UGC_ITEM_COLLECTION" value="2">
		</constant>
		<constant name="UGC_ITEM_ART" value="3">
		</constant>
		<constant name="UGC_ITEM_VIDEO" value="4">
		</constant>
		<constant name="UGC_ITEM_SCREENSHOT" value="5">
		</constant>
		<constant name="UGC_ITEM_GAME" value="6">
		</constant>
		<constant name="UGC_ITEM_SOFTWARE" value="7">
		</constant>
		<constant name="UGC_ITEM_CONCEPT" value="8">
		</constant>
		<constant name="UGC_ITEM_WEBGUIDE" value="9">
		</constant>
		<constant name="UGC_ITEM_INTEGRATEDGUIDE" value="10">
		</constant>
		<constant name="UGC_ITEM_MERCH" value="11">
		</constant>
		<constant name="UGC_ITEM_CONTROLLERBINDING" value="12">
		</constant>
		<constant name="UGC_ITEM_STEAMWORKSACCESSINVITE" value="13">
		</constant>
		<constant name="UGC_ITEM_STEAMVIDEO" value="14">
		</constant>
		<constant name="UGC_ITEM_GAMEMANAGEDITEM" value="15">
		</constant>
		<constant name="UGC_ITEM_MAX" value="16">
		</constant>
		<constant name="RESULT_OK" value="1">
		</constant>
		<constant name="RESULT_FAIL" value="2">
		</constant>
		<constant name="RESULT_NO_CONNECT" value="3">
		</constant>
		<constant name="RESULT_INVALID_PASSWORD" value="5">
		</constant>
		<constant name="RESULT_LOGGED_IN_ESLEWHERE" value="6">
		</constant>
		<constant name="RESULT_INVALID_PROTOCAL" value="7">
		</constant>
		<constant name="RESULT_INALID_PARAM" value="8">
		</constant>
		<constant name="RESULT_FILE_NOT_FOUND" value="9">
		</constant>
		<constant name="RESULT_BUSY" value="10">
		</constant>
		<constant name="RESULT_INVALID_STATE" value="11">
		</constant>
		<constant name="RESULT_INVALID_NAME" value="12">
		</constant>
		<constant name="RESULT_INVALID_EMAIL" value="13">
		</constant>
		<constant name="RESULT_DUPLICATE_NAME" value="14">
		</constant>
		<constant name="RESULT_ACCESS_DENIED" value="15">
		</constant>
		<constant name="RESULT_TIMEOUT" value="16">
		</constant>
		<constant name="RESULT_BANNED" value="17">
		</constant>
		<constant name="RESULT_ACCOUNT_NOT_FOUND" value="18">
		</constant>
		<constant name="RESULT_INVALID_STEAM_ID" value="19">
		</constant>
		<constant name="RESULT_SERVICE_UNAVAILABLE" value="20">
		</constant>
		<constant name="RESULT_NOT_LOGGED_ON" value="21">
		</constant>
		<constant name="RESULT_PENDING" value="22">
		</constant>
		<constant name="RESULT_ENCRYPT_FAILURE" value="23">
		</constant>
		<constant name="RESULT_INSUFFICIENT_PRIVILEGE" value="24">
		</constant>
		<constant name="RESULT_LIMIT_EXCEEDED" value="25">
		</constant>
		<constant name="RESULT_REVOKED" value="26">
		</constant>
		<constant name="RESULT_EXPIRED" value="27">
		</constant>
		<constant name="RESULT_ALREADY_REDEEMED" value="28">
		</constant>
		<constant name="RESULT_DUPLICATE_REQUEST" value="29">
		</constant>
		<constant name="RESULT_ALREADY_OWNED" value="30">
		</constant>
		<constant name="RESULT_IP_NOT_FOUND" value="31">
		</constant>
		<constant name="RESULT_PERSIST_FAILED" value="32">
		</constant>
		<constant name="RESULT_LOCKING_FAILED" value="33">
		</constant>
		<constant name="RESULT_LOGON_SESSION_REPLACED" value="34">
		</constant>
		<constant name="RESULT_CONNECT_FAILED" value="35">
		</constant>
		<constant name="RESULT_HANDSHAKE_FAILED" value="36">
		</constant>
		<constant name="RESULT_IO_FAILURE" value="37">
		</constant>
		<constant name="RESULT_REMOTE_DISCONNECT" value="38">
		</constant>
		<constant name="RESULT_SHOPPING_CART_NOT_FOUND" value="39">
		</constant>
		<constant name="RESULT_BLOCKED" value="40">
		</constant>
		<constant name="RESULT_IGNORED" value="41">
		</constant>
		<constant name="RESULT_NO_MATCH" value="42">
		</constant>
		<constant name="RESULT_ACCOUNT_DISABLED" value="43">
		</constant>
		<constant name="RESULT_SERVICE_READY_ONLY" value="44">
		</constant>
		<constant name="RESULT_ACCOUNT_NOT_FEATURED" value="45">
		</constant>
		<constant name="RESULT_ADMINISTRATOR_OK" value="46">
		</constant>
		<constant name="RESULT_CONTENT_VERSION" value="47">
		</constant>
		<constant name="RESULT_TRY_ANOTHER_CM" value="48">
		</constant>
		<constant name="RESULT_PASSWORD_REQUIRED_TO_KICK" value="49">
		</constant>
		<constant name="RESULT_ALREADY_LOGGED_ELSEWHERE" value="50">
		</constant>
		<constant name="RESULT_SUSPENDED" value="51">
		</constant>
		<constant name="RESULT_CANCELLED" value="52">
		</constant>
		<constant name="RESULT_DATA_CORRUPTION" value="53">
		</constant>
		<constant name="RESULT_DISK_FULL" value="54">
		</constant>
		<constant name="RESULT_REMOTE_CALL_FAILED" value="55">
		</constant>
		<constant name="RESULT_PASSWORD_UNSET" value="56">
		</constant>
		<constant name="RESULT_EXTERNAL_ACCOUNT_UNLINKED" value="57">
		</constant>
		<constant name="RESULT_PSN_TICKET_INVALID" value="58">
		</constant>
		<constant name="RESULT_EXTERNAL_ACCOUNT_ALREADY_LINKED" value="59">
		</constant>
		<constant name="RESULT_REMOTE_FILE_CONFLICT" value="60">
		</constant>
		<constant name="RESULT_ILLEGAL_PASSWORD" value="61">
		</constant>
		<constant name="RESULT_SAME_AS_PREVIOUS_VALUE" value="62">
		</constant>
		<constant name="RESULT_ACCOUNT_LOGON_DENIED" value="63">
		</constant>
		<constant name="RESULT_CANNOT_USE_OLD_PASSWORD" value="64">
		</constant>
		<constant name="RESULT_INVALID_LOGIN_AUTH_CODE" value="65">
		</constant>
		<constant name="RESULT_ACCOUNT_LOGON_DENIED_NO_MAIL" value="66">
		</constant>
		<constant name="RESULT_HARDWARE_NOT_CAPABLE" value="67">
		</constant>
		<constant name="RESULT_IP_INIT_ERROR" value="68">
		</constant>
		<constant name="RESULT_PARENTAL_CONTROL_RESTRICTED" value="69">
		</constant>
		<constant name="RESULT_FACEBOOK_QUERY_ERROR" value="70">
		</constant>
		<constant name="RESULT_EXPIRED_LOGIN_AUTH_CODE" value="71">
		</constant>
		<constant name="RESULT_IP_LOGIN_RESTRICTION_FAILED" value="72">
		</constant>
		<constant name="RESULT_ACCOUNT_LOCKED_DOWN" value="73">
		</constant>
		<constant name="RESULT_ACCOUNT_LOGON_DENIED_VERIFIED_EMAIL_REQUIRED" value="74">
		</constant>
		<constant name="RESULT_NO_MATCHING_URL" value="75">
		</constant>
		<constant name="RESULT_BAD_RESPONSE" value="76">
		</constant>
		<constant name="RESULT_REQUIRED_PASSWORD_REENTRY" value="77">
		</constant>
		<constant name="RESULT_VALUE_OUT_OF_RANGE" value="78">
		</constant>
		<constant name="RESULT_UNEXPECTED_ERROR" value="79">
		</constant>
		<constant name="RESULT_DISABLED" value="80">
		</constant>
		<constant name="RESULT_INVALID_CEG_SUBMISSION" value="81">
		</constant>
		<constant name="RESULT_RESTRICTED_DEVICE" value="82">
		</constant>
		<constant name="RESULT_REGION_LOCKED" value="83">
		</constant>
		<constant name="RESULT_RATE_LIMIT_EXCEEDED" value="84">
		</constant>
		<constant name="RESULT_ACCOUNT_LOGIN_DENIED_NEED_TWO_FACTOR" value="85">
		</constant>
		<constant name="RESULT_ITEM_DELETED" value="86">
		</constant>
		<constant name="RESULT_ACCOUNT_LOGIN_DENIED_THROTTLE" value="87">
		</constant>
		<constant name="RESULT_TWO_FACTOR_CODE_MISMATCH" value="88">
		</constant>
		<constant name="RESULT_TWO_FACTOR_ACTIVATION_CODE_MISMATCH" value="89">
		</constant>
		<constant name="RESULT_ACCOUNT_ASSOCIATED_TO_MULTIPLE_PARTNERS" value="90">
		</constant>
		<constant name="RESULT_NOT_MODIFIED" value="91">
		</constant>
		<constant name="RESULT_NO_MOBILE_DEVICE" value="92">
		</constant>
		<constant name="RESULT_TIME_NOT_SYNCED" value="93">
		</constant>
		<constant name="RESULT_SMS_CODE_FAILED" value="94">
		</constant>
		<constant name="RESULT_ACCOUNT_LIMIT_EXCEEDED" value="95">
		</constant>
		<constant name="RESULT_ACCOUNT_ACTIVITY_LIMIT_EXCEEDED" value="96">
		</constant>
		<constant name="RESULT_PHONE_ACTIVITY_LIMIT_EXCEEDED" value="97">
		</constant>
		<constant name="RESULT_REFUND_TO_WALLET" value="98">
		</constant>
		<constant name="RESULT_EMAIL_SEND_FAILURE" value="99">
		</constant>
		<constant name="RESULT_NOT_SETTLED" value="100">
		</constant>
		<constant name="RESULT_NEED_CAPTCHA" value="101">
		</constant>
		<constant name="RESULT_GSLT_DENIED" value="102">
		</constant>
		<constant name="RESULT_GS_OWNER_DENIED" value="103">
		</constant>
		<constant name="RESULT_INVALID_ITEM_TYPE" value="104">
		</constant>
		<constant name="RESULT_IP_BANNED" value="105">
		</constant>
		<constant name="RESULT_GSLT_EXPIRED" value="106">
		</constant>
		<constant name="RESULT_INSUFFICIENT_FUNDS" value="107">
		</constant>
		<constant name="RESULT_TOO_MANY_PENDING" value="108">
		</constant>
		<constant name="PERSONA_CHANGE_NAME" value="1">
		</constant>
		<constant name="PERSONA_CHANGE_STATUS" value="2">
		</constant>
		<constant name="PERSONA_CHANGE_COME_ONLINE" value="4">
		</constant>
		<constant name="PERSONA_CHANGE_GONE_OFFLINE" value="8">
		</constant>
		<constant name="PERSONA_CHANGE_GAME_PLAYED" value="16">
		</constant>
		<constant name="PERSONA_CHANGE_GAME_SERVER" value="32">
		</constant>
		<constant name="PERSONA_CHANGE_AVATAR" value="64">
		</constant>
		<constant name="PERSONA_CHANGE_JOINED_SOURCE" value="128">
		</constant>
		<constant name="PERSONA_CHANGE_LEFT_SOURCE" value="256">
		</constant>
		<constant name="PERSONA_CHANGE_RELATIONSHIP_CHANGED" value="512">
		</constant>
		<constant name="PERSONA_CHANGE_NAME_FIRST_SET" value="1024">
		</constant>
		<constant name="PERSONA_CHANGE_FACEBOOK_INFO" value="2048">
		</constant>
		<constant name="PERSONA_CHANGE_NICKNAME" value="4096">
		</constant>
		<constant name="PERSONA_CHANGE_STEAM_LEVEL" value="8192">
		</constant>
		<constant name="CHAT_ROOM_SUCCESS" value="1">
		</constant>
		<constant name="CHAT_ROOM_DOESNT_EXIST" value="2">
		</constant>
		<constant name="CHAT_ROOM_NOT_ALLOWED" value="3">
		</constant>
		<constant name="CHAT_ROOM_FULL" value="4">
		</constant>
		<constant name="CHAT_ROOM_ERROR" value="5">
		</constant>
		<constant name="CHAT_ROOM_BANNED" value="6">
		</constant>
		<constant name="CHAT_ROOM_LIMITED" value="7">
		</constant>
		<constant name="CHAT_ROOM_CLAN_DISABLED" value="8">
		</constant>
		<constant name="CHAT_ROOM_COMMUNITY_BAN" value="9">
		</constant>
		<constant name="CHAT_ROOM_MEMBER_BLOCKED_YOU" value="10">
		</constant>
		<constant name="CHAT_ROOM_YOU_BLOCKED_MEMBER" value="11">
		</constant>
		<constant name="EP2P_SEND_UNRELIABLE" value="0">
		</constant>
		<constant name="EP2P_SEND_UNRELIABLE_NO_DELAY" value="1">
		</constant>
		<constant name="EP2P_SEND_RELIABLE" value="2">
		</constant>
		<constant name="EP2P_SEND_RELIABLE_WITH_BUFFERING" value="3">
		</constant>
		<constant name="GAMEID_TYPE_APP" value="0">
		</constant>
		<constant name="GAMEID_TYPE_MOD" value="1">
		</constant>
		<constant name="GAMEID_TYPE_SHORTCUT" value="2">
		</constant>
		<constant name="GAMEID_TYPE_P2P" value="3">
		</constant>
		<constant name="FAVORITE_FLAG_FAVORITE" value="1">
		</constant>
		<constant name="FAVORITE_FLAG_HISTORY" value="2">
		</constant>
		<constant name="FAVORITE_FLAG_NONE" value="0">
		</constant>
		<constant name="CHAT_MEMBER_CHANGE_ENTERED" value="1">
		</constant>
		<constant name="CHAT_MEMBER_CHANGE_LEFT" value="2">
		</constant>
		<constant name="CHAT_MEMBER_CHANGE_DISCONNECTED" value="4">
		</constant>
		<constant name="CHAT_MEMBER_CHANGE_KICKED" value="8">
		</constant>
		<constant name="CHAT_MEMBER_CHANGE_BANNED" value="16">
		</constant>
		<constant name="FAILURE_FLUSHED_CALLBACK_QUEUE" value="0">
		</constant>
		<constant name="FAILURE_PIPE_FAIL" value="1">
		</constant>
		<constant name="GAMEPAD_INPUT_LINE_MODE_SINGLE" value="0">
		</constant>
		<constant name="GAMEPAD_INPUT_LINE_MODE_MULTIPLE" value="1">
		</constant>
		<constant name="GAMEPAD_INPUT_MODE_NORMAL" value="0">
		</constant>
		<constant name="GAMEPAD_INPUT_MODE_PASSWORD" value="1">
		</constant>
		<constant name="STEAM_API_CALL_FAILURE_NONE" value="-1">
		</constant>
		<constant name="STEAM_API_CALL_FAILURE_STEAM_GONE" value="0">
		</constant>
		<constant name="STEAM_API_CALL_FAILURE_NETWORK_FAILURE" value="1">
		</constant>
		<constant name="STEAM_API_CALL_FAILURE_INVALID_HANDLE" value="2">
		</constant>
		<constant name="STEAM_API_CALL_FAILURE_MISMATCHED_CALLBACK" value="3">
		</constant>
		<constant name="LEADERBOARD_SORT_METHOD_NONE" value="0">
		</constant>
		<constant name="LEADERBOARD_SORT_METHOD_ASC" value="1">
		</constant>
		<constant name="LEADERBOARD_SORT_METHOD_DESC" value="2">
		</constant>
		<constant name="LEADERBOARD_UPLOAD_METHOD_NONE" value="0">
		</constant>
		<constant name="LEADERBOARD_UPLOAD_METHOD_KEEP_BEST" value="1">
		</constant>
		<constant name="LEADERBOARD_UPLOAD_METHOD_FORCE_UPDATE" value="2">
		</constant>
		<constant name="LEADERBOARD_DISPLAY_TYPE_NONE" value="0">
		</constant>
		<constant name="LEADERBOARD_DISPLAY_TYPE_NUMERIC" value="1">
		</constant>
		<constant name="LEADERBOARD_DISPLAY_TYPE_TIME_SECONDS" value="2">
		</constant>
		<constant name="LEADERBOARD_DISPLAY_TYPE_TIME_MILLISECONDS" value="3">
		</constant>
		<constant name="LEADERBOARD_DATA_REQUEST_GLOBAL" value="0">
		</constant>
		<constant name="LEADERBOARD_DATA_REQUEST_GLOBAL_AROUND_USER" value="1">
		</constant>
		<constant name="LEADERBOARD_DATA_REQUEST_FRIENDS" value="2">
		</constant>
		<constant name="LEADERBOARD_DATA_REQUEST_USERS" value="3">
		</constant>
		<constant name="DEVICE_FORM_FACTOR_UNKNOWN" value="0">
		</constant>
		<constant name="DEVICE_FORM_FACTOR_PHONE" value="1">
		</constant>
		<constant name="DEVICE_FORM_FACTOR_TABLET" value="2">
		</constant>
		<constant name="DEVICE_FORM_FACTOR_COMPUTER" value="3">
		</constant>
		<constant name="DEVICE_FORM_FACTOR_TV" value="4">
		</constant>
	</constants>
</class>
